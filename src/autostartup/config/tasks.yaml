# src/autostartup/config/tasks.yaml
competitor_analysis_task:
  description: >
    Conduct in-depth market research on the user-provided startup idea: "{idea}".
    Identify 2-3 direct competitors. For each competitor, create a detailed
    analysis of their strengths and weaknesses. Compile your findings into a
    comprehensive report.
  expected_output: >
    A detailed markdown report that lists 2-3 direct competitors.
    For each competitor, the report must include a section for their 
    percieved strengths, and another on weaknesses.
  agent: market_researcher
  output_file: 'outputs/competitive_analysis.md'

gap_finding_task:
  description: >
    Based on the identified strengths and weaknesses of the competitors from the context, 
    made for the user idea "{idea}", identify a strategic gap in the market.
    Pinpoint unmet customer needs or opportunities that the new startup can exploit.
    Your analysis should form the core value proposition for the new startup.
  expected_output: >
    A concise report that clearly articulates the identified market gap or
    unmet need. It should explain how a new startup could position itself
    to fill this gap, effectively creating its unique selling proposition.
  agent: gap_finder
  context:
    - competitor_analysis_task
  output_file: 'outputs/gap_analysis.md'

technical_planning_and_scaffolding_task:
  description: >
    Leverage the user-provided startup idea "{idea}" and the detailed market gap analysis from the context to 
    design a technical blueprint that directly addresses and solves the problems outlined in the gap analysis.

    1.  Recommend a technology stack (frontend, backend, database, etc.) that is
        specifically chosen to build a competitive advantage based on the identified gap.
    2.  Design a detailed, hierarchical folder and file structure for the project.
    3.  Draft a comprehensive `README.md`. The README is critical and must explain:
      - The project's purpose.
      - Justification for the chosen tech stack, detailing HOW each choice helps 
        exploit the market gap.
      - An overview of the project's structure.
    4.  Finally, encapsulate this entire plan into a single, machine-readable JSON object.
  expected_output: >
    A single, clean JSON object and NOTHING ELSE. Do not include any introductory text,
    explanations, or markdown code block formatting around the JSON.
    The JSON object MUST have three top-level keys: 'repo_name', 'description', and 'files'.
    - 'repo_name' should be a suitable, slug-cased name for the project.
    - 'description' should be a brief, one-sentence project description.
    - 'files' must be a list of objects, where each object has a 'path' (e.g., "src/main.py")
      and 'content' (initial placeholder code or text).
    - One of the files MUST be a 'README.md' containing the detailed technical plan.
  agent: technical_architect
  context:
    - gap_finding_task
  output_file: 'outputs/scaffolding_plan.json'

scaffold_github_repo_task:
  description: >
    Using the structured JSON blueprint from the context, create a fully scaffolded GitHub repository.
    This includes:
    - Creating the repository on GitHub.
    - Setting up the directory structure as specified in the JSON.
    - Populating files with their initial content.
    - Ensuring that the README.md is well-formed and contains all necessary information.
  expected_output: >
    The full URL of the successfully created and populated GitHub repository.
  agent: github_builder
  context:
    - technical_planning_and_scaffolding_task
  output_file: 'outputs/github_repo_url.md'
