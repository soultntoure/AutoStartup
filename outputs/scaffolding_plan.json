{
  "repo_name": "smart-schedule-optimizer",
  "description": "An intelligent personalized scheduling application designed for high school students, optimizing daily schedules based on individual preferences and learning patterns.",
  "files": [
    {
      "path": "README.md",
      "content": "# Smart Schedule Optimizer: The Intelligent Personal Scheduling Assistant\n\n## 1. Project Overview\n\nThis document outlines the technical blueprint for the 'Smart Schedule Optimizer,' a cutting-edge personalized scheduling application for high school students. Unlike conventional calendars or task managers, this application's core value proposition is its ability to *intelligently design and dynamically optimize* a student's entire personalized schedule by understanding their unique learning style, energy patterns, and personal preferences, thereby minimizing stress and maximizing efficiency.\n\n### 1.1 Problem Statement\nHigh school students often struggle with managing diverse academic tasks, extracurriculars, and personal commitments. Existing tools merely track events, failing to proactively optimize schedules, resolve conflicts, or adapt to individual learning styles and energy fluctuations. This leads to burnout, missed deadlines, and suboptimal study habits.\n\n### 1.2 Our Solution\nThe Smart Schedule Optimizer aims to fill this critical gap by:\n*   **Intelligent Schedule Generation & Optimization:** Proactively suggesting and building balanced schedules, considering study times, breaks, and subject difficulty.\n*   **Proactive Conflict Resolution & Workload Balancing:** Identifying potential high-stress periods and conflicts, then proposing adjustments.\n*   **Integrated Personalization:** Learning student habits (e.g., 'focuses better on math in the morning') and using these insights for dynamic scheduling.\n*   **Actionable Insights:** Providing data-driven suggestions to improve study routines and overall well-being.\n\n### 1.3 Unique Selling Proposition (USP)\n\"Unlike generic calendars or simple academic planners, our app is the only high school scheduling solution that doesn't just track your commitments; it **intelligently designs and dynamically optimizes your entire personalized schedule** by understanding your unique learning style, energy patterns, and personal preferences, ensuring you conquer your academic and extracurricular goals with maximum efficiency and minimum stress.\"\n\n## 2. Technical Blueprint\n\n### 2.1 Architecture Overview\nThe system will follow a classic client-server architecture with a clear separation of concerns, enabling scalability, maintainability, and future extensibility. The frontend will be a single-page application (SPA) communicating with a robust backend API. A relational database will persist all critical application data. The core intelligence resides within the backend, leveraging Python's rich ecosystem for optimization and machine learning.\n\n```\n+-----------------------+\n|                       |\n|    Frontend (Web)     |\n|  React, TypeScript    |\n|                       |\n+-----------+-----------+\n            | (RESTful API calls)\n            |\n+-----------v-----------+\n|                       |\n|      Backend API      |\n|  FastAPI (Python)     |\n|                       |\n+-----------+-----------+\n            | (ORM/SQL)\n            |\n+-----------v-----------+\n|                       |\n|     Database (PostgreSQL)    |\n|                       |\n+-----------------------+\n            |\n            | (Data for ML/Optimization)\n            |\n+-----------v-----------+\n|                       |\n|   ML/Optimization     |\n|   (Python Libraries)  |\n|                       |\n+-----------------------+\n\n```\n\n### 2.2 Technology Stack Justification\n\n#### Frontend: React, TypeScript, Tailwind CSS\n*   **React:** Chosen for its component-based architecture, which promotes modularity, reusability, and maintainability. Its large community and extensive ecosystem provide ample resources and libraries for complex UI development. It's ideal for a highly interactive and dynamic application like a scheduler.\n*   **TypeScript:** Essential for building robust and scalable applications. It adds static typing to JavaScript, reducing runtime errors, improving code readability, and enhancing developer productivity through better tooling and clearer contracts between components and APIs.\n*   **Tailwind CSS:** A utility-first CSS framework that enables rapid UI development and highly customizable designs. It encourages consistency and eliminates the need for writing custom CSS, leading to smaller stylesheets and faster development cycles. Its flexibility supports the creation of a responsive and aesthetically pleasing user interface.\n\n#### Backend: Python (FastAPI, SQLAlchemy)\n*   **Python:** The natural choice for its strong ecosystem in data science, machine learning, and optimization. This is crucial for implementing the intelligent scheduling and personalization features. Its readability and extensive libraries accelerate development.\n*   **FastAPI:** A modern, high-performance web framework for building APIs with Python 3.7+ based on standard Python type hints. Its key benefits include:\n    *   **High Performance:** Comparable to Node.js and Go for certain workloads.\n    *   **Automatic API Documentation:** Generates OpenAPI (Swagger UI) and ReDoc documentation automatically from code, ensuring clear API contracts for frontend developers and automation tools.\n    *   **Data Validation:** Leverages Pydantic for robust request and response data validation, ensuring data integrity.\n    *   **Asynchronous Support:** Built on ASGI, allowing for efficient handling of concurrent requests, which is vital for potentially long-running optimization tasks.\n*   **SQLAlchemy:** A powerful and flexible SQL toolkit and Object Relational Mapper (ORM). It provides a high-level API to interact with the database, abstracting away raw SQL, enhancing code maintainability, and protecting against SQL injection attacks.\n\n#### Database: PostgreSQL\n*   **PostgreSQL:** A highly robust, reliable, and feature-rich open-source relational database management system. It's chosen for:\n    *   **ACID Compliance:** Ensures data integrity and reliability, critical for user schedules and tasks.\n    *   **Extensibility:** Supports a wide range of data types and functions, including JSONB, which is excellent for storing flexible schema data like user preferences or complex schedule block configurations without immediately needing a NoSQL database.\n    *   **Concurrency Control:** Efficiently handles multiple simultaneous user interactions.\n    *   **Scalability:** Proven to scale for large applications.\n\n#### AI/ML/Optimization: Python Libraries (SciPy, scikit-learn, Pandas)\n*   **SciPy:** Provides algorithms for optimization, linear algebra, integration, and more. Critical for implementing sophisticated scheduling algorithms and constraint satisfaction problems.\n*   **scikit-learn:** A comprehensive machine learning library for predictive data analysis. Will be used for learning user patterns (e.g., peak energy times, subject affinities) and potentially for recommending optimal study breaks or workload adjustments.\n*   **Pandas:** Essential for data manipulation and analysis, preparing user historical data for ML models and processing scheduling inputs.\n\n#### Containerization: Docker, Docker Compose\n*   **Docker:** Enables packaging the application and its dependencies into isolated containers, ensuring consistent environments from development to production. This simplifies setup for developers and streamlines deployment processes.\n*   **Docker Compose:** Facilitates the definition and running of multi-container Docker applications (frontend, backend, database) with a single command, making local development setup incredibly efficient.\n\n### 2.3 Core Modules & Features (Architectural Breakdown)\n\n1.  **User Management & Authentication:**\n    *   **Purpose:** Secure user registration, login, and session management.\n    *   **Backend:** FastAPI endpoints for `register`, `login`. Hashing passwords with `passlib` (Bcrypt) and using JWT for stateless authentication. CRUD operations for user profiles.\n    *   **Frontend:** React components for login/signup forms, Redux Toolkit for state management of authentication tokens and user info, Axios for API calls.\n\n2.  **Task Management:**\n    *   **Purpose:** Allow students to define their academic and extracurricular tasks.\n    *   **Backend:** Models (Task, Subject), CRUD endpoints for tasks. Tasks include attributes like title, description, due date, estimated time, difficulty, priority, and associated subject. This rich data is crucial for the optimizer.\n    *   **Frontend:** UI to add, edit, view, and delete tasks. Ability to categorize by subject.\n\n3.  **Subject Management:**\n    *   **Purpose:** Categorize tasks and preferences by academic subjects.\n    *   **Backend:** Basic CRUD for Subjects (e.g., Math, Science, English).\n    *   **Frontend:** UI to manage subjects and assign them to tasks.\n\n4.  **Personal Preferences:**\n    *   **Purpose:** Capture user-specific scheduling constraints and preferences.\n    *   **Backend:** A flexible `Preference` model (key-value pairs, or JSONB field) to store details like preferred study times, optimal break durations, subjects preferred at certain times of day, energy level patterns (e.g., 'morning person'), and preferred study environments.\n    *   **Frontend:** Dedicated settings/preferences page where users can input and adjust these parameters. Over time, the system will infer and suggest these preferences.\n\n5.  **Intelligent Schedule Generation & Optimization Engine (Core USP):**\n    *   **Purpose:** The central intelligence unit that creates and optimizes schedules.\n    *   **Backend (Service Layer):** This module will be a Python service within the backend (`backend/app/services/schedule_optimizer.py`). It will:\n        *   **Gather Data:** Collect user's active tasks, defined preferences, and potentially historical schedule completion data.\n        *   **Apply Constraints:** Incorporate fixed commitments (e.g., class times), task due dates, and user-defined availability.\n        *   **Optimization Algorithms:** Utilize heuristics, constraint programming (e.g., `ortools` for more advanced versions), or custom-built algorithms to:\n            *   **Allocate Time:** Assign tasks to time blocks based on estimated duration, priority, and difficulty.\n            *   **Balance Workload:** Distribute tasks evenly to prevent overload on specific days/times.\n            *   **Integrate Preferences:** Prioritize scheduling tasks during preferred times (e.g., math in the morning) and insert optimal breaks.\n            *   **Resolve Conflicts:** Identify overlaps and propose re-arrangements.\n        *   **Learning & Adaptation:** (Future State) Incorporate simple ML models (`scikit-learn`) to learn from past schedule adherence, actual vs. estimated task completion times, and reported energy levels to refine future scheduling decisions.\n    *   **Frontend:** A \"Generate Schedule\" button, displaying the generated schedule in an intuitive calendar view, with options for manual adjustments and feedback mechanisms.\n\n6.  **Actionable Insights Module:**\n    *   **Purpose:** Provide data-driven suggestions to improve study habits and productivity.\n    *   **Backend (Service Layer):** Analyze user's historical task completion, schedule adherence, reported focus levels (if captured), and task attributes to identify patterns. For instance, suggesting 'you complete Math tasks faster in the evenings' or 'you tend to procrastinate on tasks with a difficulty rating of 4 or higher.'\n    *   **Frontend:** A dashboard section displaying personalized tips, visualizations of study habits, and performance metrics.\n\n### 2.4 Data Model Overview\n\n*   **User:** `id`, `email`, `hashed_password`, `is_active`, `created_at`.\n*   **Subject:** `id`, `name`, `description`.\n*   **Task:** `id`, `title`, `description`, `due_date`, `estimated_time_minutes`, `difficulty` (1-5), `priority` (1-5), `subject_id` (FK to Subject), `owner_id` (FK to User), `created_at`.\n*   **Schedule:** `id`, `user_id` (FK to User), `date` (date for which schedule is generated), `schedule_data` (JSONB field storing an array of `ScheduleBlock` objects), `generated_at`.\n    *   `ScheduleBlock` (JSON Structure within `schedule_data`): `type` (e.g., 'study', 'break', 'extracurricular'), `start_time`, `end_time`, `task_id` (optional FK), `subject_id` (optional FK), `description`.\n*   **Preference:** `id`, `user_id` (FK to User), `key` (e.g., 'morning_focus_subject'), `value` (e.g., 'math', '15_minutes').\n\n### 2.5 API Design Principles\n\n*   **RESTful:** Adhere to REST principles for clear, predictable, and stateless communication.\n*   **Resource-Oriented:** APIs designed around resources (e.g., `/users`, `/tasks`, `/schedules`).\n*   **Versioned:** Use `/api/v1/` prefix for versioning to allow future API changes without breaking existing clients.\n*   **Stateless:** No session state on the server, relying on JWT for authentication.\n*   **Clear Contracts:** Use Pydantic models for request body validation and response serialization, ensuring strict data types and structures.\n*   **Error Handling:** Consistent error response format with appropriate HTTP status codes.\n\n### 2.6 Deployment Strategy\n\n*   **Containerization:** Both frontend and backend applications will be containerized using Docker.\n*   **Orchestration:** Docker Compose for local development. For production, deployment will leverage Kubernetes (e.g., AWS EKS, GCP GKE, Azure AKS) for robust scaling, self-healing, and management of microservices.\n*   **Database:** A managed PostgreSQL service (e.g., AWS RDS, GCP Cloud SQL) will be used in production for reliability, backups, and ease of management.\n*   **CI/CD:** Implement a Continuous Integration/Continuous Deployment pipeline to automate testing, building, and deployment of new features.\n\n## 3. Project Structure\n\nThe repository will be structured to clearly separate frontend and backend concerns, facilitating independent development, testing, and deployment.\n\n```\nsmart-schedule-optimizer/\n├── backend/                 # Python FastAPI Backend\n│   ├── app/                 # Main application source code\n│   │   ├── api/             # API endpoints definitions\n│   │   │   └── v1/          # API Version 1\n│   │   │       ├── endpoints/ # Specific resource endpoints (users, tasks, schedules, etc.)\n│   │   │       │   ├── users.py\n│   │   │       │   ├── tasks.py\n│   │   │       │   ├── schedules.py\n│   │   │       │   ├── subjects.py\n│   │   │       │   └── preferences.py\n│   │   │       └── api.py   # Aggregates all v1 endpoints\n│   │   ├── core/            # Core configurations, security, utilities\n│   │   │   ├── config.py    # Application settings (env vars)\n│   │   │   └── security.py  # Password hashing, JWT helpers\n│   │   ├── crud/            # Create, Read, Update, Delete operations for database models\n│   │   │   ├── user.py\n│   │   │   ├── task.py\n│   │   │   ├── schedule.py\n│   │   │   ├── subject.py\n│   │   │   └── preference.py\n│   │   ├── database.py      # Database connection and session management\n│   │   ├── models.py        # SQLAlchemy ORM models (database schemas)\n│   │   ├── schemas.py       # Pydantic schemas for request/response validation\n│   │   ├── services/        # Business logic, complex operations (e.g., scheduling algorithm)\n│   │   │   └── schedule_optimizer.py # Core intelligent scheduling logic\n│   │   ├── ml_models/       # Placeholder for trained ML models (e.g., .pkl files)\n│   │   │   └── .gitkeep\n│   │   └── main.py          # FastAPI application entry point\n│   ├── tests/               # Unit and integration tests for backend\n│   │   ├── conftest.py      # Pytest fixtures\n│   │   └── test_*.py\n│   ├── requirements.txt     # Python dependencies\n│   └── Dockerfile           # Dockerfile for backend service\n├── frontend/                # React TypeScript Frontend\n│   ├── public/              # Static assets\n│   ├── src/                 # React application source code\n│   │   ├── app/             # Redux store configuration\n│   │   │   └── store.ts\n│   │   ├── api/             # API client setup (Axios instances, API calls)\n│   │   │   └── api.ts\n│   │   ├── assets/          # Images, icons, fonts\n│   │   ├── components/      # Reusable UI components\n│   │   │   ├── PrivateRoute.tsx\n│   │   │   └── Navbar.tsx\n│   │   ├── features/        # Redux slices for different feature domains\n│   │   │   ├── auth/authSlice.ts\n│   │   │   ├── tasks/tasksSlice.ts\n│   │   │   ├── schedules/schedulesSlice.ts\n│   │   │   └── preferences/preferencesSlice.ts\n│   │   ├── hooks/           # Custom React hooks\n│   │   ├── pages/           # Page-level components (routes)\n│   │   │   ├── LoginPage.tsx\n│   │   │   ├── DashboardPage.tsx\n│   │   │   ├── SchedulePage.tsx\n│   │   │   ├── TasksPage.tsx\n│   │   │   └── PreferencesPage.tsx\n│   │   ├── styles/          # Global styles, Tailwind directives\n│   │   │   └── index.css\n│   │   ├── utils/           # Utility functions\n│   │   ├── App.tsx          # Main application component, router setup\n│   │   └── index.tsx        # React entry point\n│   ├── package.json         # Node.js dependencies for frontend\n│   ├── tsconfig.json        # TypeScript configuration\n│   ├── tailwind.config.js   # Tailwind CSS configuration\n│   ├── postcss.config.js    # PostCSS configuration\n│   └── .env                 # Frontend environment variables\n├── nginx/                   # Nginx configuration for reverse proxy\n│   └── nginx.conf\n├── .env.example             # Example environment variables\n├── .gitignore               # Git ignore rules\n├── Dockerfile               # Main Dockerfile for multi-stage build\n└── docker-compose.yml       # Docker Compose setup for development\n```\n\n## 4. Getting Started (Development Setup)\n\nTo set up the project locally using Docker Compose:\n\n1.  **Clone the repository:**\n    `git clone https://github.com/your-username/smart-schedule-optimizer.git`\n    `cd smart-schedule-optimizer`\n\n2.  **Create `.env` file:**\n    Copy `.env.example` to `.env` and fill in any necessary secrets/variables. Ensure `POSTGRES_DB`, `POSTGRES_USER`, `POSTGRES_PASSWORD`, and `BACKEND_SECRET_KEY` are set.\n    `cp .env.example .env`\n\n3.  **Build and run services:**\n    `docker-compose up --build`\n\n4.  **Access the application:**\n    *   Frontend: `http://localhost:3000`\n    *   Backend API (FastAPI interactive docs): `http://localhost:8000/api/v1/openapi.json` (Swagger UI will be `http://localhost:8000/api/v1/docs`)\n\n## 5. Future Considerations\n\n*   **User Feedback Loop:** Integrate mechanisms for users to provide feedback on generated schedules, which can be used to further refine the optimization algorithms.\n*   **Mobile Applications:** Extend the platform to native iOS/Android apps (e.g., using React Native or Swift/Kotlin).\n*   **Integrations:** Connect with external calendars (Google Calendar, Outlook Calendar) or learning management systems (LMS) for automatic task import.\n*   **Advanced AI/ML:** Implement more sophisticated reinforcement learning or neural network models for predictive scheduling and habit formation.\n*   **Gamification:** Introduce elements of gamification to encourage healthy study habits and schedule adherence.\n*   **Webhooks/Notifications:** Implement real-time notifications for upcoming tasks or schedule changes."
    },
    {
      "path": ".gitignore",
      "content": "# Python\n__pycache__/\n*.pyc\n.pytest_cache/\n.env\nvirtual_env/\n\n# Node\nnode_modules/\nbuild/\n\n# OS\n.DS_Store\n*.log\n"
    },
    {
      "path": "Dockerfile",
      "content": "# Multi-stage build for backend\nFROM python:3.9-slim-buster as backend-builder\nWORKDIR /app/backend\nCOPY ./backend/requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY ./backend/ .\n\nFROM python:3.9-slim-buster as backend-runner\nWORKDIR /app/backend\nCOPY --from=backend-builder /app/backend /app/backend\nEXPOSE 8000\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n\n# Multi-stage build for frontend\nFROM node:18-alpine as frontend-builder\nWORKDIR /app/frontend\nCOPY ./frontend/package.json ./frontend/package-lock.json .\nRUN npm install\nCOPY ./frontend/ .\nRUN npm run build\n\nFROM nginx:stable-alpine as frontend-runner\nCOPY --from=frontend-builder /app/frontend/build /usr/share/nginx/html\nCOPY ./nginx/nginx.conf /etc/nginx/conf.d/default.conf\nEXPOSE 80\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n"
    },
    {
      "path": "docker-compose.yml",
      "content": "version: '3.8'\n\nservices:\n  db:\n    image: postgres:14-alpine\n    restart: always\n    environment:\n      POSTGRES_DB: ${POSTGRES_DB}\n      POSTGRES_USER: ${POSTGRES_USER}\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}\n    volumes:\n      - db_data:/var/lib/postgresql/data\n    ports:\n      - \"5432:5432\"\n\n  backend:\n    build:\n      context: .\n      dockerfile: Dockerfile\n      target: backend-runner\n    restart: always\n    environment:\n      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}\n      SECRET_KEY: ${BACKEND_SECRET_KEY}\n    ports:\n      - \"8000:8000\"\n    depends_on:\n      - db\n\n  frontend:\n    build:\n      context: .\n      dockerfile: Dockerfile\n      target: frontend-runner\n    restart: always\n    ports:\n      - \"3000:80\"\n    depends_on:\n      - backend\n\nvolumes:\n  db_data:\n"
    },
    {
      "path": ".env.example",
      "content": "POSTGRES_DB=smart_schedule_db\nPOSTGRES_USER=user\nPOSTGRES_PASSWORD=password\nBACKEND_SECRET_KEY=supersecretkeyforencryptionandjwt\n"
    },
    {
      "path": "nginx/nginx.conf",
      "content": "server {\n    listen 80;\n    location / {\n        root /usr/share/nginx/html;\n        try_files $uri $uri/ /index.html;\n    }\n\n    location /api/ {\n        proxy_pass http://backend:8000/api/;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n"
    },
    {
      "path": "backend/requirements.txt",
      "content": "fastapi==0.109.0\nuvicorn[standard]==0.27.0\nSQLAlchemy==2.0.25\npsycopg2-binary==2.9.9\npydantic==2.5.3\npydantic-settings==2.1.0\npython-multipart==0.0.6\nscikit-learn==1.3.2\nnumpy==1.26.3\npandas==2.2.0\npasslib[bcrypt]==1.7.4\npython-jose[cryptography]==3.3.0\n"
    },
    {
      "path": "backend/app/main.py",
      "content": "from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom .api.v1 import api_router\nfrom .core.config import settings\nfrom .database import engine, Base\n\nBase.metadata.create_all(bind=engine)\n\napp = FastAPI(\n    title=settings.PROJECT_NAME,\n    openapi_url=f\"{settings.API_V1_STR}/openapi.json\"\n)\n\n# Set up CORS middleware\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"http://localhost:3000\"], # Replace with frontend URL in production\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"]\n)\n\napp.include_router(api_router, prefix=settings.API_V1_STR)\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Welcome to Smart Schedule Optimizer API!\"}\n\n"
    },
    {
      "path": "backend/app/api/v1/api.py",
      "content": "from fastapi import APIRouter\nfrom .endpoints import users, tasks, schedules, subjects, preferences\n\napi_router = APIRouter()\napi_router.include_router(users.router, prefix=\"/users\", tags=[\"users\"])\napi_router.include_router(tasks.router, prefix=\"/tasks\", tags=[\"tasks\"])\napi_router.include_router(schedules.router, prefix=\"/schedules\", tags=[\"schedules\"])\napi_router.include_router(subjects.router, prefix=\"/subjects\", tags=[\"subjects\"])\napi_router.include_router(preferences.router, prefix=\"/preferences\", tags=[\"preferences\"])\n"
    },
    {
      "path": "backend/app/api/v1/endpoints/users.py",
      "content": "from fastapi import APIRouter, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\nfrom ....database import get_db\nfrom ....schemas import UserCreate, User\nfrom ....crud import user as crud_user\nfrom ....core.security import get_password_hash\n\nrouter = APIRouter()\n\n@router.post(\"/\", response_model=User)\ndef create_user(user: UserCreate, db: Session = Depends(get_db)):\n    db_user = crud_user.get_user_by_email(db, email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    hashed_password = get_password_hash(user.password)\n    return crud_user.create_user(db=db, user=user.model_dump(), hashed_password=hashed_password)\n\n# Placeholder for other user endpoints (e.g., get_current_user, login)\n"
    },
    {
      "path": "backend/app/api/v1/endpoints/tasks.py",
      "content": "from fastapi import APIRouter, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\nfrom ....database import get_db\nfrom ....schemas import TaskCreate, Task\nfrom ....crud import task as crud_task\n# Add dependencies for current user after auth is fully set up\n\nrouter = APIRouter()\n\n@router.post(\"/\", response_model=Task)\ndef create_task(task: TaskCreate, db: Session = Depends(get_db)):\n    return crud_task.create_task(db=db, task=task)\n\n@router.get(\"/{task_id}\", response_model=Task)\ndef read_task(task_id: int, db: Session = Depends(get_db)):\n    db_task = crud_task.get_task(db, task_id=task_id)\n    if db_task is None:\n        raise HTTPException(status_code=404, detail=\"Task not found\")\n    return db_task\n\n# Placeholder for update and delete\n"
    },
    {
      "path": "backend/app/api/v1/endpoints/schedules.py",
      "content": "from fastapi import APIRouter, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\nfrom ....database import get_db\nfrom ....schemas import ScheduleCreate, Schedule\nfrom ....crud import schedule as crud_schedule\nfrom ....services.schedule_optimizer import generate_and_optimize_schedule\n\nrouter = APIRouter()\n\n@router.post(\"/generate_optimized\", response_model=Schedule)\ndef create_optimized_schedule(schedule_data: ScheduleCreate, db: Session = Depends(get_db)):\n    # In a real app, schedule_data would contain user tasks, preferences, etc.\n    # For now, it's a placeholder\n    try:\n        optimized_schedule = generate_and_optimize_schedule(db, user_id=1, schedule_data=schedule_data)\n        return crud_schedule.create_schedule(db=db, schedule=optimized_schedule)\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Failed to generate schedule: {e}\")\n\n# Placeholder for other schedule endpoints\n"
    },
    {
      "path": "backend/app/api/v1/endpoints/subjects.py",
      "content": "from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom ....database import get_db\nfrom ....schemas import SubjectCreate, Subject\nfrom ....crud import subject as crud_subject\n\nrouter = APIRouter()\n\n@router.post(\"/\", response_model=Subject)\ndef create_subject(subject: SubjectCreate, db: Session = Depends(get_db)):\n    return crud_subject.create_subject(db=db, subject=subject)\n\n@router.get(\"/\", response_model=list[Subject])\ndef read_subjects(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    subjects = crud_subject.get_subjects(db, skip=skip, limit=limit)\n    return subjects\n"
    },
    {
      "path": "backend/app/api/v1/endpoints/preferences.py",
      "content": "from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom ....database import get_db\nfrom ....schemas import PreferenceCreate, PreferenceUpdate, Preference\nfrom ....crud import preference as crud_preference\n\nrouter = APIRouter()\n\n@router.post(\"/\", response_model=Preference)\ndef create_preference(preference: PreferenceCreate, db: Session = Depends(get_db)):\n    return crud_preference.create_preference(db=db, preference=preference)\n\n@router.get(\"/user/{user_id}\", response_model=list[Preference])\ndef read_user_preferences(user_id: int, db: Session = Depends(get_db)):\n    preferences = crud_preference.get_preferences_by_user(db, user_id=user_id)\n    if not preferences:\n        raise HTTPException(status_code=404, detail=\"Preferences not found for this user\")\n    return preferences\n\n@router.put(\"/{preference_id}\", response_model=Preference)\ndef update_preference(preference_id: int, preference: PreferenceUpdate, db: Session = Depends(get_db)):\n    db_preference = crud_preference.update_preference(db, preference_id=preference_id, preference=preference)\n    if not db_preference:\n        raise HTTPException(status_code=404, detail=\"Preference not found\")\n    return db_preference\n"
    },
    {
      "path": "backend/app/core/config.py",
      "content": "from pydantic_settings import BaseSettings, SettingsConfigDict\n\nclass Settings(BaseSettings):\n    PROJECT_NAME: str = \"Smart Schedule Optimizer\"\n    API_V1_STR: str = \"/api/v1\"\n    DATABASE_URL: str\n    SECRET_KEY: str\n    ALGORITHM: str = \"HS256\"\n    ACCESS_TOKEN_EXPIRE_MINUTES: int = 30\n\n    model_config = SettingsConfigDict(env_file=\".env\")\n\nsettings = Settings()\n"
    },
    {
      "path": "backend/app/core/security.py",
      "content": "from passlib.context import CryptContext\nfrom datetime import datetime, timedelta\nfrom typing import Union, Any\nfrom jose import jwt\nfrom .config import settings\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\ndef get_password_hash(password: str) -> str:\n    return pwd_context.hash(password)\n\ndef verify_password(plain_password: str, hashed_password: str) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)\n\ndef create_access_token(subject: Union[str, Any], expires_delta: timedelta = None) -> str:\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode = {\"exp\": expire, \"sub\": str(subject)}\n    encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)\n    return encoded_jwt\n"
    },
    {
      "path": "backend/app/database.py",
      "content": "from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\nfrom .core.config import settings\n\nSQLALCHEMY_DATABASE_URL = settings.DATABASE_URL\n\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n"
    },
    {
      "path": "backend/app/models.py",
      "content": "from sqlalchemy import Column, Integer, String, DateTime, Boolean, ForeignKey, JSON\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.sql import func\n\nfrom .database import Base\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    email = Column(String, unique=True, index=True)\n    hashed_password = Column(String)\n    is_active = Column(Boolean, default=True)\n    created_at = Column(DateTime, default=func.now())\n\n    tasks = relationship(\"Task\", back_populates=\"owner\")\n    schedules = relationship(\"Schedule\", back_populates=\"user\")\n    preferences = relationship(\"Preference\", back_populates=\"user\")\n\nclass Subject(Base):\n    __tablename__ = \"subjects\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, unique=True, index=True)\n    description = Column(String, nullable=True)\n\nclass Task(Base):\n    __tablename__ = \"tasks\"\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String, index=True)\n    description = Column(String, nullable=True)\n    due_date = Column(DateTime, nullable=True)\n    estimated_time_minutes = Column(Integer)\n    difficulty = Column(Integer) # 1-5 scale\n    priority = Column(Integer) # 1-5 scale\n    subject_id = Column(Integer, ForeignKey(\"subjects.id\"), nullable=True)\n    owner_id = Column(Integer, ForeignKey(\"users.id\"))\n    created_at = Column(DateTime, default=func.now())\n\n    owner = relationship(\"User\", back_populates=\"tasks\")\n    subject = relationship(\"Subject\")\n\nclass Schedule(Base):\n    __tablename__ = \"schedules\"\n    id = Column(Integer, primary_key=True, index=True)\n    user_id = Column(Integer, ForeignKey(\"users.id\"))\n    date = Column(DateTime, index=True) # Date for which the schedule is generated\n    schedule_data = Column(JSON) # Stores the intelligent schedule structure (e.g., blocks, tasks, breaks)\n    generated_at = Column(DateTime, default=func.now())\n\n    user = relationship(\"User\", back_populates=\"schedules\")\n\nclass Preference(Base):\n    __tablename__ = \"preferences\"\n    id = Column(Integer, primary_key=True, index=True)\n    user_id = Column(Integer, ForeignKey(\"users.id\"))\n    key = Column(String, index=True) # e.g., 'morning_focus_subject', 'preferred_break_duration'\n    value = Column(String) # e.g., 'math', '15_minutes'\n    # Potentially add a 'type' column for validation (e.g., 'enum', 'int', 'bool')\n\n    user = relationship(\"User\", back_populates=\"preferences\")\n"
    },
    {
      "path": "backend/app/schemas.py",
      "content": "from pydantic import BaseModel, EmailStr, Field\nfrom datetime import datetime\nfrom typing import Optional, List, Dict, Any\n\n# User Schemas\nclass UserBase(BaseModel):\n    email: EmailStr\n\nclass UserCreate(UserBase):\n    password: str\n\nclass User(UserBase):\n    id: int\n    is_active: bool\n    created_at: datetime\n\n    model_config = {\"from_attributes\": True}\n\n# Subject Schemas\nclass SubjectBase(BaseModel):\n    name: str\n    description: Optional[str] = None\n\nclass SubjectCreate(SubjectBase):\n    pass\n\nclass Subject(SubjectBase):\n    id: int\n\n    model_config = {\"from_attributes\": True}\n\n# Task Schemas\nclass TaskBase(BaseModel):\n    title: str\n    description: Optional[str] = None\n    due_date: Optional[datetime] = None\n    estimated_time_minutes: int = Field(..., gt=0)\n    difficulty: int = Field(..., ge=1, le=5)\n    priority: int = Field(..., ge=1, le=5)\n    subject_id: Optional[int] = None\n\nclass TaskCreate(TaskBase):\n    owner_id: int # In a real app, this would be inferred from auth\n\nclass Task(TaskBase):\n    id: int\n    owner_id: int\n    created_at: datetime\n\n    model_config = {\"from_attributes\": True}\n\n# Schedule Schemas\nclass ScheduleBlock(BaseModel):\n    type: str # e.g., 'study', 'break', 'extracurricular'\n    start_time: datetime\n    end_time: datetime\n    task_id: Optional[int] = None # For study blocks\n    subject_id: Optional[int] = None # For study blocks\n    description: Optional[str] = None\n\nclass ScheduleBase(BaseModel):\n    date: datetime\n    schedule_data: List[ScheduleBlock] # The optimized blocks\n\nclass ScheduleCreate(ScheduleBase):\n    user_id: int # In a real app, inferred from auth\n    # Additional fields needed for generation logic might go here, e.g., available_hours_start, available_hours_end\n\nclass Schedule(ScheduleBase):\n    id: int\n    user_id: int\n    generated_at: datetime\n\n    model_config = {\"from_attributes\": True}\n\n# Preference Schemas\nclass PreferenceBase(BaseModel):\n    key: str\n    value: str\n\nclass PreferenceCreate(PreferenceBase):\n    user_id: int\n\nclass PreferenceUpdate(BaseModel):\n    value: str\n\nclass Preference(PreferenceBase):\n    id: int\n    user_id: int\n\n    model_config = {\"from_attributes\": True}\n"
    },
    {
      "path": "backend/app/crud/user.py",
      "content": "from sqlalchemy.orm import Session\nfrom .. import models, schemas\n\ndef get_user(db: Session, user_id: int):\n    return db.query(models.User).filter(models.User.id == user_id).first()\n\ndef get_user_by_email(db: Session, email: str):\n    return db.query(models.User).filter(models.User.email == email).first()\n\ndef create_user(db: Session, user: dict, hashed_password: str):\n    db_user = models.User(email=user['email'], hashed_password=hashed_password)\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n"
    },
    {
      "path": "backend/app/crud/task.py",
      "content": "from sqlalchemy.orm import Session\nfrom .. import models, schemas\n\ndef get_task(db: Session, task_id: int):\n    return db.query(models.Task).filter(models.Task.id == task_id).first()\n\ndef get_tasks_by_user(db: Session, user_id: int, skip: int = 0, limit: int = 100):\n    return db.query(models.Task).filter(models.Task.owner_id == user_id).offset(skip).limit(limit).all()\n\ndef create_task(db: Session, task: schemas.TaskCreate):\n    db_task = models.Task(**task.model_dump())\n    db.add(db_task)\n    db.commit()\n    db.refresh(db_task)\n    return db_task\n"
    },
    {
      "path": "backend/app/crud/schedule.py",
      "content": "from sqlalchemy.orm import Session\nfrom .. import models, schemas\n\ndef get_schedule(db: Session, schedule_id: int):\n    return db.query(models.Schedule).filter(models.Schedule.id == schedule_id).first()\n\ndef get_schedules_by_user(db: Session, user_id: int, skip: int = 0, limit: int = 100):\n    return db.query(models.Schedule).filter(models.Schedule.user_id == user_id).offset(skip).limit(limit).all()\n\ndef create_schedule(db: Session, schedule: schemas.ScheduleCreate):\n    db_schedule = models.Schedule(**schedule.model_dump())\n    db.add(db_schedule)\n    db.commit()\n    db.refresh(db_schedule)\n    return db_schedule\n"
    },
    {
      "path": "backend/app/crud/subject.py",
      "content": "from sqlalchemy.orm import Session\nfrom .. import models, schemas\n\ndef get_subject(db: Session, subject_id: int):\n    return db.query(models.Subject).filter(models.Subject.id == subject_id).first()\n\ndef get_subjects(db: Session, skip: int = 0, limit: int = 100):\n    return db.query(models.Subject).offset(skip).limit(limit).all()\n\ndef create_subject(db: Session, subject: schemas.SubjectCreate):\n    db_subject = models.Subject(**subject.model_dump())\n    db.add(db_subject)\n    db.commit()\n    db.refresh(db_subject)\n    return db_subject\n"
    },
    {
      "path": "backend/app/crud/preference.py",
      "content": "from sqlalchemy.orm import Session\nfrom .. import models, schemas\n\ndef get_preference(db: Session, preference_id: int):\n    return db.query(models.Preference).filter(models.Preference.id == preference_id).first()\n\ndef get_preferences_by_user(db: Session, user_id: int):\n    return db.query(models.Preference).filter(models.Preference.user_id == user_id).all()\n\ndef create_preference(db: Session, preference: schemas.PreferenceCreate):\n    db_preference = models.Preference(**preference.model_dump())\n    db.add(db_preference)\n    db.commit()\n    db.refresh(db_preference)\n    return db_preference\n\ndef update_preference(db: Session, preference_id: int, preference: schemas.PreferenceUpdate):\n    db_preference = db.query(models.Preference).filter(models.Preference.id == preference_id).first()\n    if db_preference:\n        for key, value in preference.model_dump(exclude_unset=True).items():\n            setattr(db_preference, key, value)\n        db.add(db_preference)\n        db.commit()\n        db.refresh(db_preference)\n    return db_preference\n"
    },
    {
      "path": "backend/app/services/schedule_optimizer.py",
      "content": "from sqlalchemy.orm import Session\nfrom typing import List\nfrom datetime import datetime, timedelta\nimport random\n\nfrom .. import schemas, models\nfrom ..crud import task as crud_task\nfrom ..crud import preference as crud_preference\n\ndef generate_and_optimize_schedule(db: Session, user_id: int, schedule_data: schemas.ScheduleCreate) -> schemas.ScheduleCreate:\n    \"\"\"\n    Generates and optimizes a personalized schedule for a user.\n    This is a simplified heuristic model for demonstration.\n    A real implementation would involve more complex algorithms, ML models,\n    and deeper analysis of user preferences and historical data.\n    \"\"\"\n    user_tasks = crud_task.get_tasks_by_user(db, user_id=user_id)\n    user_preferences = crud_preference.get_preferences_by_user(db, user_id=user_id)\n\n    # Example: Parse preferences (simplified)\n    preferred_study_time_start = datetime.strptime('08:00', '%H:%M').time()\n    preferred_study_time_end = datetime.strptime('17:00', '%H:%M').time()\n    preferred_break_duration_minutes = 15\n    study_block_duration_minutes = 60\n\n    for pref in user_preferences:\n        if pref.key == 'preferred_study_start' and pref.value:\n            preferred_study_time_start = datetime.strptime(pref.value, '%H:%M').time()\n        if pref.key == 'preferred_study_end' and pref.value:\n            preferred_study_time_end = datetime.strptime(pref.value, '%H:%M').time()\n        if pref.key == 'preferred_break_duration_minutes' and pref.value.isdigit():\n            preferred_break_duration_minutes = int(pref.value)\n\n    # Basic scheduling logic\n    current_time = datetime.combine(schedule_data.date.date(), preferred_study_time_start)\n    end_of_day = datetime.combine(schedule_data.date.date(), preferred_study_time_end)\n    optimized_blocks: List[schemas.ScheduleBlock] = []\n\n    remaining_tasks = sorted(user_tasks, key=lambda t: (t.priority, t.difficulty), reverse=True)\n\n    while remaining_tasks and current_time < end_of_day:\n        task = remaining_tasks.pop(0) # Take the highest priority/difficulty task\n        \n        # Schedule study block\n        block_end_time = current_time + timedelta(minutes=min(task.estimated_time_minutes, study_block_duration_minutes))\n        if block_end_time > end_of_day:\n            break # No more time in the day\n\n        optimized_blocks.append(schemas.ScheduleBlock(\n            type='study',\n            start_time=current_time,\n            end_time=block_end_time,\n            task_id=task.id,\n            subject_id=task.subject_id,\n            description=task.title\n        ))\n        task.estimated_time_minutes -= min(task.estimated_time_minutes, study_block_duration_minutes)\n        if task.estimated_time_minutes > 0:\n            # If task not finished, put it back to be scheduled later\n            remaining_tasks.append(task)\n            remaining_tasks.sort(key=lambda t: (t.priority, t.difficulty), reverse=True)\n\n        current_time = block_end_time\n\n        # Add a break if there's time and it's not the end of the day\n        if current_time + timedelta(minutes=preferred_break_duration_minutes) < end_of_day:\n            optimized_blocks.append(schemas.ScheduleBlock(\n                type='break',\n                start_time=current_time,\n                end_time=current_time + timedelta(minutes=preferred_break_duration_minutes),\n                description='Short break'\n            ))\n            current_time += timedelta(minutes=preferred_break_duration_minutes)\n\n    # Add placeholder for potential conflict resolution or workload balancing here\n    # e.g., if total scheduled time exceeds capacity, or if specific subjects are grouped.\n    # For this blueprint, we assume it fits.\n\n    # Return a new ScheduleCreate object with the optimized blocks\n    # The actual user_id should come from the authenticated user\n    return schemas.ScheduleCreate(\n        user_id=user_id,\n        date=schedule_data.date,\n        schedule_data=optimized_blocks\n    )\n\n"
    },
    {
      "path": "backend/app/ml_models/.gitkeep",
      "content": ""
    },
    {
      "path": "backend/tests/test_users.py",
      "content": "import pytest\nfrom fastapi.testclient import TestClient\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\nfrom backend.app.main import app\nfrom backend.app.database import Base, get_db\n\n# Use an in-memory SQLite database for testing\nSQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\"\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n@pytest.fixture(name=\"db\")\ndef db_fixture():\n    Base.metadata.create_all(bind=engine)\n    db = TestingSessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n        Base.metadata.drop_all(bind=engine)\n\n@pytest.fixture(name=\"client\")\ndef client_fixture(db: Session):\n    def override_get_db():\n        try:\n            yield db\n        finally:\n            db.close()\n    app.dependency_overrides[get_db] = override_get_db\n    with TestClient(app) as c:\n        yield c\n    app.dependency_overrides.clear()\n\ndef test_create_user(client: TestClient):\n    response = client.post(\n        \"/api/v1/users/\",\n        json={\"email\": \"test@example.com\", \"password\": \"testpassword\"}\n    )\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"email\"] == \"test@example.com\"\n    assert \"id\" in data\n    assert \"created_at\" in data\n\ndef test_create_existing_user(client: TestClient):\n    client.post(\n        \"/api/v1/users/\",\n        json={\"email\": \"test2@example.com\", \"password\": \"testpassword\"}\n    )\n    response = client.post(\n        \"/api/v1/users/\",\n        json={\"email\": \"test2@example.com\", \"password\": \"testpassword\"}\n    )\n    assert response.status_code == 400\n    assert response.json()[\"detail\"] == \"Email already registered\"\n\n"
    },
    {
      "path": "frontend/package.json",
      "content": "{\n  \"name\": \"frontend\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@testing-library/jest-dom\": \"^5.17.0\",\n    \"@testing-library/react\": \"^13.4.0\",\n    \"@testing-library/user-event\": \"^13.5.0\",\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-scripts\": \"5.0.1\",\n    \"web-vitals\": \"^2.1.4\",\n    \"axios\": \"^1.6.7\",\n    \"react-router-dom\": \"^6.22.1\",\n    \"@reduxjs/toolkit\": \"^2.2.1\",\n    \"react-redux\": \"^9.1.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^16.18.82\",\n    \"@types/react\": \"^18.2.57\",\n    \"@types/react-dom\": \"^18.2.19\",\n    \"typescript\": \"^4.9.5\",\n    \"tailwindcss\": \"^3.4.1\",\n    \"postcss\": \"^8.4.35\",\n    \"autoprefixer\": \"^10.4.17\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"react-app\",\n      \"react-app/jest\"\n    ]\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\n"
    },
    {
      "path": "frontend/tailwind.config.js",
      "content": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./src/**/*.{js,jsx,ts,tsx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n"
    },
    {
      "path": "frontend/postcss.config.js",
      "content": "module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n"
    },
    {
      "path": "frontend/src/index.tsx",
      "content": "import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>\n);\n\nreportWebVitals();\n"
    },
    {
      "path": "frontend/src/index.css",
      "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n"
    },
    {
      "path": "frontend/src/App.tsx",
      "content": "import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport LoginPage from './pages/LoginPage';\nimport DashboardPage from './pages/DashboardPage';\nimport SchedulePage from './pages/SchedulePage';\nimport TasksPage from './pages/TasksPage';\nimport PreferencesPage from './pages/PreferencesPage';\nimport PrivateRoute from './components/PrivateRoute';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Routes>\n          <Route path=\"/login\" element={<LoginPage />} />\n          <Route path=\"/\" element={<PrivateRoute><DashboardPage /></PrivateRoute>} />\n          <Route path=\"/schedule\" element={<PrivateRoute><SchedulePage /></PrivateRoute>} />\n          <Route path=\"/tasks\" element={<PrivateRoute><TasksPage /></PrivateRoute>} />\n          <Route path=\"/preferences\" element={<PrivateRoute><PreferencesPage /></PrivateRoute>} />\n          {/* Add more routes as needed */}\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n"
    },
    {
      "path": "frontend/src/app/store.ts",
      "content": "import { configureStore } from '@reduxjs/toolkit';\nimport authReducer from '../features/auth/authSlice';\nimport tasksReducer from '../features/tasks/tasksSlice';\nimport schedulesReducer from '../features/schedules/schedulesSlice';\nimport preferencesReducer from '../features/preferences/preferencesSlice';\n\nexport const store = configureStore({\n  reducer: {\n    auth: authReducer,\n    tasks: tasksReducer,\n    schedules: schedulesReducer,\n    preferences: preferencesReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n"
    },
    {
      "path": "frontend/src/features/auth/authSlice.ts",
      "content": "import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface AuthState {\n  token: string | null;\n  isAuthenticated: boolean;\n  user: { id: number; email: string } | null;\n}\n\nconst initialState: AuthState = {\n  token: localStorage.getItem('token'),\n  isAuthenticated: !!localStorage.getItem('token'),\n  user: null, // Populate on login/app load\n};\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    setCredentials: (state, action: PayloadAction<{ token: string; user: { id: number; email: string } }>) => {\n      state.token = action.payload.token;\n      state.user = action.payload.user;\n      state.isAuthenticated = true;\n      localStorage.setItem('token', action.payload.token);\n    },\n    logout: (state) => {\n      state.token = null;\n      state.user = null;\n      state.isAuthenticated = false;\n      localStorage.removeItem('token');\n    },\n  },\n});\n\nexport const { setCredentials, logout } = authSlice.actions;\n\nexport default authSlice.reducer;\n"
    },
    {
      "path": "frontend/src/features/tasks/tasksSlice.ts",
      "content": "import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface Task {\n  id: number;\n  title: string;\n  description?: string;\n  dueDate?: string;\n  estimatedTimeMinutes: number;\n  difficulty: number;\n  priority: number;\n  subjectId?: number;\n  ownerId: number;\n  createdAt: string;\n}\n\ninterface TasksState {\n  tasks: Task[];\n  status: 'idle' | 'loading' | 'succeeded' | 'failed';\n  error: string | null;\n}\n\nconst initialState: TasksState = {\n  tasks: [],\n  status: 'idle',\n  error: null,\n};\n\nexport const tasksSlice = createSlice({\n  name: 'tasks',\n  initialState,\n  reducers: {\n    addTask: (state, action: PayloadAction<Task>) => {\n      state.tasks.push(action.payload);\n    },\n    setTasks: (state, action: PayloadAction<Task[]>) => {\n      state.tasks = action.payload;\n    },\n    // Add more reducers for update, delete, etc.\n  },\n});\n\nexport const { addTask, setTasks } = tasksSlice.actions;\n\nexport default tasksSlice.reducer;\n"
    },
    {
      "path": "frontend/src/api/api.ts",
      "content": "import axios from 'axios';\n\nconst API_URL = process.env.NODE_ENV === 'production' ? '/api/v1' : 'http://localhost:8000/api/v1';\n\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\napiClient.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\nexport const authApi = {\n  login: (email: string, password: string) => apiClient.post('/login', { email, password }),\n  register: (email: string, password: string) => apiClient.post('/users/', { email, password }),\n};\n\nexport const tasksApi = {\n  getTasks: () => apiClient.get('/tasks/'),\n  createTask: (taskData: any) => apiClient.post('/tasks/', taskData),\n};\n\nexport const schedulesApi = {\n  generateSchedule: (scheduleData: any) => apiClient.post('/schedules/generate_optimized', scheduleData),\n  getSchedules: () => apiClient.get('/schedules/'),\n};\n\nexport const preferencesApi = {\n  getPreferences: (userId: number) => apiClient.get(`/preferences/user/${userId}`),\n  createPreference: (preferenceData: any) => apiClient.post('/preferences/', preferenceData),\n  updatePreference: (preferenceId: number, preferenceData: any) => apiClient.put(`/preferences/${preferenceId}`, preferenceData),\n};\n"
    },
    {
      "path": "frontend/src/components/PrivateRoute.tsx",
      "content": "import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { RootState } from '../app/store';\n\ninterface PrivateRouteProps {\n  children: JSX.Element;\n}\n\nconst PrivateRoute: React.FC<PrivateRouteProps> = ({ children }) => {\n  const isAuthenticated = useSelector((state: RootState) => state.auth.isAuthenticated);\n\n  if (!isAuthenticated) {\n    return <Navigate to=\"/login\" replace />;\n  }\n\n  return children;\n};\n\nexport default PrivateRoute;\n"
    },
    {
      "path": "frontend/src/pages/LoginPage.tsx",
      "content": "import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { authApi } from '../api/api';\nimport { setCredentials } from '../features/auth/authSlice';\n\nconst LoginPage: React.FC = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isRegistering, setIsRegistering] = useState(false);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      if (isRegistering) {\n        const response = await authApi.register(email, password);\n        // Auto-login after registration for simplicity in this blueprint\n        const loginResponse = await authApi.login(email, password);\n        dispatch(setCredentials({ token: 'mock-token', user: loginResponse.data })); // Mock token for now\n      } else {\n        const response = await authApi.login(email, password);\n        dispatch(setCredentials({ token: 'mock-token', user: response.data })); // Mock token for now\n      }\n      navigate('/');\n    } catch (error) {\n      console.error('Authentication failed:', error);\n      alert('Authentication failed. Please check your credentials or try again.');\n    }\n  };\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-gray-100\">\n      <div className=\"w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow-md\">\n        <h2 className=\"text-2xl font-bold text-center text-gray-900\">\n          {isRegistering ? 'Register' : 'Login'} to Smart Scheduler\n        </h2>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">Email</label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              required\n              className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n          </div>\n          <div>\n            <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">Password</label>\n            <input\n              type=\"password\"\n              id=\"password\"\n              name=\"password\"\n              required\n              className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n          </div>\n          <button\n            type=\"submit\"\n            className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n          >\n            {isRegistering ? 'Register' : 'Login'}\n          </button>\n        </form>\n        <div className=\"text-center\">\n          <button\n            onClick={() => setIsRegistering(!isRegistering)}\n            className=\"font-medium text-indigo-600 hover:text-indigo-500\"\n          >\n            {isRegistering ? 'Already have an account? Login' : 'Don\\'t have an account? Register'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginPage;\n"
    },
    {
      "path": "frontend/src/pages/DashboardPage.tsx",
      "content": "import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../app/store';\nimport Navbar from '../components/Navbar';\n\nconst DashboardPage: React.FC = () => {\n  const user = useSelector((state: RootState) => state.auth.user);\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 flex flex-col\">\n      <Navbar />\n      <main className=\"flex-grow p-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-6\">Welcome, {user?.email || 'Student'}!</h1>\n        <p className=\"text-lg text-gray-700 mb-4\">This is your personalized dashboard. Here you'll find an overview of your schedule, upcoming tasks, and actionable insights.</p>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          <div className=\"bg-white p-6 rounded-lg shadow-md\">\n            <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">Today's Schedule</h2>\n            <p className=\"text-gray-600\">Your intelligent schedule for today will be displayed here.</p>\n            {/* Placeholder for schedule component */}\n          </div>\n\n          <div className=\"bg-white p-6 rounded-lg shadow-md\">\n            <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">Upcoming Tasks</h2>\n            <p className=\"text-gray-600\">View and manage your tasks. Add new assignments, projects, and exams.</p>\n            {/* Placeholder for tasks component */}\n          </div>\n\n          <div className=\"bg-white p-6 rounded-lg shadow-md\">\n            <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">Insights & Tips</h2>\n            <p className=\"text-gray-600\">Personalized recommendations to optimize your learning and productivity.</p>\n            {/* Placeholder for insights component */}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default DashboardPage;\n"
    },
    {
      "path": "frontend/src/pages/SchedulePage.tsx",
      "content": "import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { schedulesApi } from '../api/api';\nimport Navbar from '../components/Navbar';\nimport { RootState } from '../app/store';\n\ninterface ScheduleBlock {\n  type: string;\n  start_time: string;\n  end_time: string;\n  task_id?: number;\n  subject_id?: number;\n  description?: string;\n}\n\ninterface ScheduleData {\n  id: number;\n  user_id: number;\n  date: string;\n  schedule_data: ScheduleBlock[];\n  generated_at: string;\n}\n\nconst SchedulePage: React.FC = () => {\n  const user = useSelector((state: RootState) => state.auth.user);\n  const [schedule, setSchedule] = useState<ScheduleData | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleGenerateSchedule = async () => {\n    if (!user) return;\n\n    setLoading(true);\n    setError(null);\n    try {\n      // For a real app, this would send current tasks, preferences, etc.\n      const today = new Date();\n      const scheduleDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n      const response = await schedulesApi.generateSchedule({\n        user_id: user.id, // Replace with actual user ID from auth\n        date: scheduleDate.toISOString(),\n        schedule_data: [] // Initial empty data, backend generates it\n      });\n      setSchedule(response.data);\n    } catch (err) {\n      console.error('Error generating schedule:', err);\n      setError('Failed to generate schedule. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // In a real app, you might fetch the current day's schedule on load\n  useEffect(() => {\n    // Example: fetch today's schedule if it exists\n  }, [user]);\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 flex flex-col\">\n      <Navbar />\n      <main className=\"flex-grow p-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-6\">Your Personalized Schedule</h1>\n\n        <button\n          onClick={handleGenerateSchedule}\n          disabled={loading}\n          className=\"bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 disabled:opacity-50\"\n        >\n          {loading ? 'Generating...' : 'Generate Today\\'s Optimized Schedule'}\n        </button>\n\n        {error && <p className=\"text-red-500 mt-4\">{error}</p>}\n\n        {schedule ? (\n          <div className=\"mt-6 bg-white p-6 rounded-lg shadow-md\">\n            <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">Schedule for {new Date(schedule.date).toLocaleDateString()}</h2>\n            {schedule.schedule_data.length > 0 ? (\n              <ul className=\"space-y-3\">\n                {schedule.schedule_data.map((block, index) => (\n                  <li key={index} className=\"border-b pb-2 last:border-b-0\">\n                    <p className=\"font-medium\">{new Date(block.start_time).toLocaleTimeString()} - {new Date(block.end_time).toLocaleTimeString()}</p>\n                    <p><strong>Type:</strong> {block.type}</p>\n                    {block.description && <p><strong>Details:</strong> {block.description}</p>}\n                    {block.task_id && <p><strong>Task ID:</strong> {block.task_id}</p>}\n                  </li>\n                ))}\n              </ul>\n            ) : (\n              <p className=\"text-gray-600\">No schedule blocks generated for this day.</p>\n            )}\n          </div>\n        ) : (\n          <p className=\"mt-4 text-gray-600\">Click 'Generate Today\\'s Optimized Schedule' to create your personalized plan.</p>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default SchedulePage;\n"
    },
    {
      "path": "frontend/src/components/Navbar.tsx",
      "content": "import React from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { logout } from '../features/auth/authSlice';\n\nconst Navbar: React.FC = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const handleLogout = () => {\n    dispatch(logout());\n    navigate('/login');\n  };\n\n  return (\n    <nav className=\"bg-indigo-600 p-4 text-white shadow-md\">\n      <div className=\"container mx-auto flex justify-between items-center\">\n        <Link to=\"/\" className=\"text-2xl font-bold\">Smart Scheduler</Link>\n        <div className=\"space-x-4\">\n          <Link to=\"/dashboard\" className=\"hover:text-indigo-200\">Dashboard</Link>\n          <Link to=\"/schedule\" className=\"hover:text-indigo-200\">Schedule</Link>\n          <Link to=\"/tasks\" className=\"hover:text-indigo-200\">Tasks</Link>\n          <Link to=\"/preferences\" className=\"hover:text-indigo-200\">Preferences</Link>\n          <button onClick={handleLogout} className=\"hover:text-indigo-200\">Logout</button>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n"
    }
  ]
}