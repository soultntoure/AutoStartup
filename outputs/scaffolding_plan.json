Thought: I have meticulously reviewed the detailed technical plan provided. My task is to transform this human-readable markdown into a structured JSON object. I have identified the following key steps:
1.  **Repository Name Generation**: Based on the project idea "A resume creator platform where students or those looking for jobs can get templates of ready resumes and create their own resume," and the project title "Resumate AI: Smart Resume Builder" from the context, I will use `resumate-ai` as the URL-safe repository name.
2.  **Description Generation**: I will extract a concise, one-sentence description from the "Project Description" section. "Resumate AI is an innovative, user-friendly resume creation platform designed to empower students and job seekers to effortlessly craft professional and impactful resumes." fits perfectly.
3.  **File Path Identification**: I will meticulously parse the "Detailed, Hierarchical Folder Structure" section to list every single file path. For directories like `apps/api/src/auth/`, I will infer typical NestJS file structures (e.g., `auth.module.ts`, `auth.controller.ts`, `auth.service.ts`, etc.) to provide a realistic blueprint. For `apps/web/src/app/api/`, I'll add a generic `health/route.ts` as an example.
4.  **README.md Content Extraction**: I will extract the entire content provided in the context, from the beginning (`# Resumate AI: Smart Resume Builder`) up to, but not including, the final "Note on Production Deployment" section. This forms the complete `README.md` file content.
5.  **Boilerplate Content Generation**: For all other identified files, I will generate high-quality, representative boilerplate content tailored to the specified technical stack (Next.js, NestJS, TypeScript, Tailwind CSS, Prisma, PostgreSQL, Terraform, GitHub Actions, Docker, Yarn Workspaces, etc.). This includes `.gitignore`, Dockerfiles, `package.json` files, `tsconfig.json` files, framework-specific code (e.g., React components, NestJS modules, Terraform HCL), and configuration files.

I am confident in generating a comprehensive and accurate JSON output based on these steps.```json
{
  "repo_name": "resumate-ai",
  "description": "Resumate AI is an innovative, user-friendly resume creation platform designed to empower students and job seekers to effortlessly craft professional and impactful resumes.",
  "files": [
    {
      "path": ".github/workflows/backend-deploy.yml",
      "content": "name: Backend CI/CD\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - 'apps/api/**'\n      - 'packages/db/**'\n      - 'packages/types/**'\n      - 'infra/aws/**'\n  workflow_dispatch:\n\nenv:\n  AWS_REGION: us-east-1 # Replace with your target AWS region\n  ECR_REPOSITORY: resumate-ai-backend\n  ECS_SERVICE: resumate-ai-backend-service\n  ECS_CLUSTER: resumate-ai-cluster\n  ECS_TASK_DEFINITION: resumate-ai-backend-task\n  CONTAINER_NAME: backend-container\n\njobs:\n  build-and-deploy:\n    name: Build, Push, and Deploy Backend\n    runs-on: ubuntu-latest\n    environment: production\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Configure AWS credentials\n      uses: aws-actions/configure-aws-credentials@v1\n      with:\n        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        aws-region: ${{ env.AWS_REGION }}\n\n    - name: Login to Amazon ECR\n      id: login-ecr\n      uses: aws-actions/amazon-ecr-login@v1\n\n    - name: Set up Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: '18'\n\n    - name: Install Yarn and dependencies\n      run: |\n        npm install -g yarn\n        yarn install --immutable\n\n    - name: Build backend Docker image\n      working-directory: apps/api\n      run: |\n        docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} .\n\n    - name: Push backend Docker image to ECR\n      run: |\n        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}\n\n    - name: Fill in the new image ID in the ECS task definition\n      id: render-task-definition\n      uses: aws-actions/amazon-ecs-render-task-definition@v1\n      with:\n        task-definition: infra/aws/ecs-backend-task-definition.json # You'd generate this from Terraform outputs or manage it here.\n        container-name: ${{ env.CONTAINER_NAME }}\n        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}\n\n    - name: Deploy Amazon ECS task definition\n      uses: aws-actions/amazon-ecs-deploy-task-definition@v1\n      with:\n        task-definition: ${{ steps.render-task-definition.outputs.task-definition }}\n        service: ${{ env.ECS_SERVICE }}\n        cluster: ${{ env.ECS_CLUSTER }}\n        wait-for-service-stability: true\n"
    },
    {
      "path": ".github/workflows/frontend-deploy.yml",
      "content": "name: Frontend CI/CD\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - 'apps/web/**'\n      - 'packages/ui/**'\n      - 'packages/types/**'\n      - 'infra/aws/**'\n  workflow_dispatch:\n\nenv:\n  AWS_REGION: us-east-1 # Replace with your target AWS region\n  ECR_REPOSITORY: resumate-ai-frontend\n  ECS_SERVICE: resumate-ai-frontend-service\n  ECS_CLUSTER: resumate-ai-cluster\n  ECS_TASK_DEFINITION: resumate-ai-frontend-task\n  CONTAINER_NAME: frontend-container\n  S3_BUCKET: resumate-ai-frontend-static-assets # Your S3 bucket for static assets\n  DISTRIBUTION_ID: EXXXXXXXXXXXXXXXXX # Your CloudFront Distribution ID\n\njobs:\n  build-and-deploy:\n    name: Build, Push, and Deploy Frontend\n    runs-on: ubuntu-latest\n    environment: production\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n\n    - name: Configure AWS credentials\n      uses: aws-actions/configure-aws-credentials@v1\n      with:\n        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        aws-region: ${{ env.AWS_REGION }}\n\n    - name: Login to Amazon ECR\n      id: login-ecr\n      uses: aws-actions/amazon-ecr-login@v1\n\n    - name: Set up Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: '18'\n\n    - name: Install Yarn and dependencies\n      run: |\n        npm install -g yarn\n        yarn install --immutable\n\n    - name: Build frontend Docker image\n      working-directory: apps/web\n      run: |\n        docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} --build-arg NEXT_PUBLIC_API_URL=${{ secrets.PROD_API_URL }} .\n\n    - name: Push frontend Docker image to ECR\n      run: |\n        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}\n\n    - name: Fill in the new image ID in the ECS task definition\n      id: render-task-definition\n      uses: aws-actions/amazon-ecs-render-task-definition@v1\n      with:\n        task-definition: infra/aws/ecs-frontend-task-definition.json # You'd generate this from Terraform outputs or manage it here.\n        container-name: ${{ env.CONTAINER_NAME }}\n        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}\n\n    - name: Deploy Amazon ECS task definition\n      uses: aws-actions/amazon-ecs-deploy-task-definition@v1\n      with:\n        task-definition: ${{ steps.render-task-definition.outputs.task-definition }}\n        service: ${{ env.ECS_SERVICE }}\n        cluster: ${{ env.ECS_CLUSTER }}\n        wait-for-service-stability: true\n\n    - name: Invalidate CloudFront cache\n      run: |\n        aws cloudfront create-invalidation --distribution-id ${{ env.DISTRIBUTION_ID }} --paths \"/*\"\n"
    },
    {
      "path": "apps/api/src/auth/auth.module.ts",
      "content": "import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './jwt.strategy';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get<string>('JWT_SECRET'),\n        signOptions: { expiresIn: '60m' },\n      }),\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n"
    },
    {
      "path": "apps/api/src/auth/auth.controller.ts",
      "content": "import { Controller, Post, Body, UseGuards, Request, Get } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { RegisterDto, LoginDto } from './dto'; // Assuming DTOs exist in a 'dto' folder or similar\nimport { AuthGuard } from '@nestjs/passport';\nimport { User } from '@resumate-ai/types';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('register')\n  async register(@Body() registerDto: RegisterDto) {\n    return this.authService.register(registerDto);\n  }\n\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    return this.authService.login(loginDto);\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('profile')\n  getProfile(@Request() req: { user: User }) {\n    return req.user;\n  }\n}\n"
    },
    {
      "path": "apps/api/src/auth/auth.service.ts",
      "content": "import { Injectable, UnauthorizedException, ConflictException } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\nimport { RegisterDto, LoginDto } from './dto';\nimport { User } from '@resumate-ai/types';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService,\n  ) {}\n\n  async register(registerDto: RegisterDto): Promise<Omit<User, 'password'>> {\n    const existingUser = await this.usersService.findByEmail(registerDto.email);\n    if (existingUser) {\n      throw new ConflictException('User with this email already exists');\n    }\n\n    const hashedPassword = await bcrypt.hash(registerDto.password, 10);\n    const user = await this.usersService.create({\n      ...registerDto,\n      password: hashedPassword,\n    });\n    \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...result } = user; // Exclude password from the returned object\n    return result;\n  }\n\n  async validateUser(email: string, pass: string): Promise<User | null> {\n    const user = await this.usersService.findByEmail(email);\n    if (user && (await bcrypt.compare(pass, user.password))) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password, ...result } = user;\n      return result as User;\n    }\n    return null;\n  }\n\n  async login(loginDto: LoginDto): Promise<{ accessToken: string }> {\n    const user = await this.validateUser(loginDto.email, loginDto.password);\n    if (!user) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n    const payload = { email: user.email, sub: user.id };\n    return {\n      accessToken: this.jwtService.sign(payload),\n    };\n  }\n}\n"
    },
    {
      "path": "apps/api/src/auth/jwt.strategy.ts",
      "content": "import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { User } from '@resumate-ai/types';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private configService: ConfigService,\n    private usersService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get<string>('JWT_SECRET'),\n    });\n  }\n\n  async validate(payload: { sub: string; email: string }): Promise<User> {\n    const user = await this.usersService.findById(payload.sub);\n    if (!user) {\n      throw new Error('User not found'); // Or UnauthorizedException\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...result } = user;\n    return result as User;\n  }\n}\n"
    },
    {
      "path": "apps/api/src/auth/auth.guard.ts",
      "content": "import { Injectable } from '@nestjs/common';\nimport { AuthGuard as PassportAuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class AuthGuard extends PassportAuthGuard('jwt') {}\n"
    },
    {
      "path": "apps/api/src/auth/dto/index.ts",
      "content": "export * from './register.dto';\nexport * from './login.dto';\n"
    },
    {
      "path": "apps/api/src/auth/dto/register.dto.ts",
      "content": "import { IsEmail, IsNotEmpty, MinLength } from 'class-validator';\n\nexport class RegisterDto {\n  @IsEmail()\n  email!: string;\n\n  @IsNotEmpty()\n  @MinLength(6)\n  password!: string;\n\n  @IsNotEmpty()\n  name!: string;\n}\n"
    },
    {
      "path": "apps/api/src/auth/dto/login.dto.ts",
      "content": "import { IsEmail, IsNotEmpty } from 'class-validator';\n\nexport class LoginDto {\n  @IsEmail()\n  email!: string;\n\n  @IsNotEmpty()\n  password!: string;\n}\n"
    },
    {
      "path": "apps/api/src/users/users.module.ts",
      "content": "import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { PrismaModule } from '@resumate-ai/db/prisma.module'; // Assuming a PrismaModule exists\n\n@Module({\n  imports: [PrismaModule],\n  providers: [UsersService],\n  controllers: [UsersController],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n"
    },
    {
      "path": "apps/api/src/users/users.controller.ts",
      "content": "import { Controller, Get, Param, UseGuards, Request, NotFoundException } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { AuthGuard } from '@nestjs/passport';\nimport { User } from '@resumate-ai/types';\n\n@Controller('users')\n@UseGuards(AuthGuard('jwt'))\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get(':id')\n  async findOne(@Param('id') id: string, @Request() req: { user: User }) {\n    if (req.user.id !== id) {\n      throw new NotFoundException('User not found or access denied');\n    }\n    const user = await this.usersService.findById(id);\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password, ...result } = user;\n    return result;\n  }\n\n  @Get('me')\n  getMe(@Request() req: { user: User }) {\n    return req.user;\n  }\n}\n"
    },
    {
      "path": "apps/api/src/users/users.service.ts",
      "content": "import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '@resumate-ai/db'; // Assuming PrismaService is exported from packages/db/index.ts\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { User } from '@resumate-ai/types';\n\n@Injectable()\nexport class UsersService {\n  constructor(private prisma: PrismaService) {}\n\n  async create(data: CreateUserDto): Promise<User> {\n    return this.prisma.user.create({ data });\n  }\n\n  async findByEmail(email: string): Promise<User | null> {\n    return this.prisma.user.findUnique({ where: { email } });\n  }\n\n  async findById(id: string): Promise<User | null> {\n    return this.prisma.user.findUnique({ where: { id } });\n  }\n\n  async update(id: string, data: Partial<User>): Promise<User> {\n    return this.prisma.user.update({ where: { id }, data });\n  }\n\n  async remove(id: string): Promise<User> {\n    return this.prisma.user.delete({ where: { id } });\n  }\n}\n"
    },
    {
      "path": "apps/api/src/users/dto/create-user.dto.ts",
      "content": "import { IsEmail, IsNotEmpty, MinLength } from 'class-validator';\n\nexport class CreateUserDto {\n  @IsEmail()\n  email!: string;\n\n  @IsNotEmpty()\n  @MinLength(6)\n  password!: string;\n\n  @IsNotEmpty()\n  name!: string;\n}\n"
    },
    {
      "path": "apps/api/src/templates/templates.module.ts",
      "content": "import { Module } from '@nestjs/common';\nimport { TemplatesService } from './templates.service';\nimport { TemplatesController } from './templates.controller';\nimport { PrismaModule } from '@resumate-ai/db/prisma.module';\n\n@Module({\n  imports: [PrismaModule],\n  providers: [TemplatesService],\n  controllers: [TemplatesController],\n  exports: [TemplatesService],\n})\nexport class TemplatesModule {}\n"
    },
    {
      "path": "apps/api/src/templates/templates.controller.ts",
      "content": "import { Controller, Get, Param, UseGuards, Body, Post, Patch, Delete, HttpCode, HttpStatus } from '@nestjs/common';\nimport { TemplatesService } from './templates.service';\nimport { AuthGuard } from '@nestjs/passport';\nimport { CreateTemplateDto, UpdateTemplateDto } from './dto';\nimport { User, Template } from '@resumate-ai/types';\n\n@Controller('templates')\nexport class TemplatesController {\n  constructor(private readonly templatesService: TemplatesService) {}\n\n  @Get()\n  async findAll(): Promise<Template[]> {\n    return this.templatesService.findAll();\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string): Promise<Template | null> {\n    return this.templatesService.findOne(id);\n  }\n\n  @UseGuards(AuthGuard('jwt')) // Admin-only route might be needed\n  @Post()\n  async create(@Body() createTemplateDto: CreateTemplateDto): Promise<Template> {\n    return this.templatesService.create(createTemplateDto);\n  }\n\n  @UseGuards(AuthGuard('jwt')) // Admin-only route might be needed\n  @Patch(':id')\n  async update(@Param('id') id: string, @Body() updateTemplateDto: UpdateTemplateDto): Promise<Template> {\n    return this.templatesService.update(id, updateTemplateDto);\n  }\n\n  @UseGuards(AuthGuard('jwt')) // Admin-only route might be needed\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async remove(@Param('id') id: string): Promise<void> {\n    await this.templatesService.remove(id);\n  }\n}\n"
    },
    {
      "path": "apps/api/src/templates/templates.service.ts",
      "content": "import { Injectable, NotFoundException } from '@nestjs/common';\nimport { PrismaService } from '@resumate-ai/db';\nimport { CreateTemplateDto, UpdateTemplateDto } from './dto';\nimport { Template } from '@resumate-ai/types';\n\n@Injectable()\nexport class TemplatesService {\n  constructor(private prisma: PrismaService) {}\n\n  async findAll(): Promise<Template[]> {\n    return this.prisma.template.findMany();\n  }\n\n  async findOne(id: string): Promise<Template | null> {\n    const template = await this.prisma.template.findUnique({ where: { id } });\n    if (!template) {\n      throw new NotFoundException(`Template with ID \"${id}\" not found`);\n    }\n    return template;\n  }\n\n  async create(data: CreateTemplateDto): Promise<Template> {\n    return this.prisma.template.create({ data });\n  }\n\n  async update(id: string, data: UpdateTemplateDto): Promise<Template> {\n    const template = await this.prisma.template.findUnique({ where: { id } });\n    if (!template) {\n      throw new NotFoundException(`Template with ID \"${id}\" not found`);\n    }\n    return this.prisma.template.update({ where: { id }, data });\n  }\n\n  async remove(id: string): Promise<void> {\n    const template = await this.prisma.template.findUnique({ where: { id } });\n    if (!template) {\n      throw new NotFoundException(`Template with ID \"${id}\" not found`);\n    }\n    await this.prisma.template.delete({ where: { id } });\n  }\n}\n"
    },
    {
      "path": "apps/api/src/templates/dto/index.ts",
      "content": "export * from './create-template.dto';\nexport * from './update-template.dto';\n"
    },
    {
      "path": "apps/api/src/templates/dto/create-template.dto.ts",
      "content": "import { IsNotEmpty, IsString, IsUrl, IsOptional } from 'class-validator';\n\nexport class CreateTemplateDto {\n  @IsNotEmpty()\n  @IsString()\n  name!: string;\n\n  @IsOptional()\n  @IsString()\n  @IsUrl()\n  imageUrl?: string;\n\n  @IsNotEmpty()\n  @IsString()\n  content!: string; // HTML or JSON string\n}\n"
    },
    {
      "path": "apps/api/src/templates/dto/update-template.dto.ts",
      "content": "import { PartialType } from '@nestjs/mapped-types'; // Or use OmitType/PickType from @nestjs/swagger\nimport { CreateTemplateDto } from './create-template.dto';\n\nexport class UpdateTemplateDto extends PartialType(CreateTemplateDto) {}\n"
    },
    {
      "path": "apps/api/src/resumes/resumes.module.ts",
      "content": "import { Module } from '@nestjs/common';\nimport { ResumesService } from './resumes.service';\nimport { ResumesController } from './resumes.controller';\nimport { PrismaModule } from '@resumate-ai/db/prisma.module';\nimport { PdfGeneratorModule } from '../pdf-generator/pdf-generator.module';\nimport { FilesModule } from '../files/files.module';\n\n@Module({\n  imports: [PrismaModule, PdfGeneratorModule, FilesModule],\n  providers: [ResumesService],\n  controllers: [ResumesController],\n})\nexport class ResumesModule {}\n"
    },
    {
      "path": "apps/api/src/resumes/resumes.controller.ts",
      "content": "import { Controller, Get, Post, Body, Param, Delete, UseGuards, Request, HttpCode, HttpStatus, Patch } from '@nestjs/common';\nimport { ResumesService } from './resumes.service';\nimport { AuthGuard } from '@nestjs/passport';\nimport { CreateResumeDto, UpdateResumeDto } from './dto';\nimport { Resume, User } from '@resumate-ai/types';\n\n@Controller('resumes')\n@UseGuards(AuthGuard('jwt'))\nexport class ResumesController {\n  constructor(private readonly resumesService: ResumesService) {}\n\n  @Post()\n  async create(@Request() req: { user: User }, @Body() createResumeDto: CreateResumeDto): Promise<Resume> {\n    return this.resumesService.create(req.user.id, createResumeDto);\n  }\n\n  @Get()\n  async findAll(@Request() req: { user: User }): Promise<Resume[]> {\n    return this.resumesService.findAllForUser(req.user.id);\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string, @Request() req: { user: User }): Promise<Resume> {\n    return this.resumesService.findOneForUser(req.user.id, id);\n  }\n\n  @Patch(':id')\n  async update(@Param('id') id: string, @Request() req: { user: User }, @Body() updateResumeDto: UpdateResumeDto): Promise<Resume> {\n    return this.resumesService.update(req.user.id, id, updateResumeDto);\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async remove(@Param('id') id: string, @Request() req: { user: User }): Promise<void> {\n    await this.resumesService.remove(req.user.id, id);\n  }\n\n  @Post(':id/generate-pdf')\n  async generatePdf(@Param('id') id: string, @Request() req: { user: User }): Promise<{ pdfUrl: string }> {\n    return this.resumesService.generatePdfForUser(req.user.id, id);\n  }\n}\n"
    },
    {
      "path": "apps/api/src/resumes/resumes.service.ts",
      "content": "import { Injectable, NotFoundException, ForbiddenException } from '@nestjs/common';\nimport { PrismaService } from '@resumate-ai/db';\nimport { CreateResumeDto, UpdateResumeDto } from './dto';\nimport { Resume } from '@resumate-ai/types';\nimport { PdfGeneratorService } from '../pdf-generator/pdf-generator.service';\nimport { FilesService } from '../files/files.service';\n\n@Injectable()\nexport class ResumesService {\n  constructor(\n    private prisma: PrismaService,\n    private pdfGeneratorService: PdfGeneratorService,\n    private filesService: FilesService,\n  ) {}\n\n  async create(userId: string, createResumeDto: CreateResumeDto): Promise<Resume> {\n    return this.prisma.resume.create({\n      data: {\n        userId,\n        templateId: createResumeDto.templateId,\n        data: createResumeDto.data,\n      },\n    });\n  }\n\n  async findAllForUser(userId: string): Promise<Resume[]> {\n    return this.prisma.resume.findMany({ where: { userId } });\n  }\n\n  async findOneForUser(userId: string, id: string): Promise<Resume> {\n    const resume = await this.prisma.resume.findUnique({ where: { id } });\n    if (!resume) {\n      throw new NotFoundException(`Resume with ID \"${id}\" not found.`);\n    }\n    if (resume.userId !== userId) {\n      throw new ForbiddenException('Access to this resume is denied.');\n    }\n    return resume;\n  }\n\n  async update(userId: string, id: string, updateResumeDto: UpdateResumeDto): Promise<Resume> {\n    const resume = await this.findOneForUser(userId, id); // Checks ownership and existence\n    return this.prisma.resume.update({ where: { id }, data: updateResumeDto });\n  }\n\n  async remove(userId: string, id: string): Promise<void> {\n    await this.findOneForUser(userId, id); // Checks ownership and existence\n    await this.prisma.resume.delete({ where: { id } });\n  }\n\n  async generatePdfForUser(userId: string, resumeId: string): Promise<{ pdfUrl: string }> {\n    const resume = await this.prisma.resume.findUnique({\n      where: { id: resumeId },\n      include: { template: true },\n    });\n\n    if (!resume) {\n      throw new NotFoundException(`Resume with ID \"${resumeId}\" not found.`);\n    }\n    if (resume.userId !== userId) {\n      throw new ForbiddenException('Access to this resume is denied.');\n    }\n\n    // Assume template.content is HTML string for Puppeteer\n    const htmlContent = resume.template.content; \n    const resumeData = resume.data as any; // Cast to any to access properties for templating\n\n    // In a real scenario, you'd likely use a templating engine (e.g., Handlebars) \n    // to inject resumeData into htmlContent before passing to Puppeteer.\n    // For boilerplate, we'll assume the HTML is pre-structured for data injection.\n    const finalHtml = this.pdfGeneratorService.renderTemplate(htmlContent, resumeData);\n\n    const pdfBuffer = await this.pdfGeneratorService.generatePdf(finalHtml);\n\n    const fileName = `resumes/${userId}/${resumeId}.pdf`;\n    const pdfUrl = await this.filesService.uploadFile(pdfBuffer, fileName, 'application/pdf');\n\n    await this.prisma.resume.update({ where: { id: resumeId }, data: { pdfUrl } });\n\n    return { pdfUrl };\n  }\n}\n"
    },
    {
      "path": "apps/api/src/resumes/dto/index.ts",
      "content": "export * from './create-resume.dto';\nexport * from './update-resume.dto';\n"
    },
    {
      "path": "apps/api/src/resumes/dto/create-resume.dto.ts",
      "content": "import { IsNotEmpty, IsString, IsObject } from 'class-validator';\nimport { IsJson } from '../../common/decorators/is-json.decorator'; // Assuming a custom decorator for JSON\n\nexport class CreateResumeDto {\n  @IsNotEmpty()\n  @IsString()\n  templateId!: string;\n\n  @IsNotEmpty()\n  @IsObject() // Or IsJson if you have a custom validator for JSON string\n  data!: Record<string, any>; // JSON blob of resume data\n}\n"
    },
    {
      "path": "apps/api/src/resumes/dto/update-resume.dto.ts",
      "content": "import { PartialType } from '@nestjs/mapped-types';\nimport { CreateResumeDto } from './create-resume.dto';\n\nexport class UpdateResumeDto extends PartialType(CreateResumeDto) {}\n"
    },
    {
      "path": "apps/api/src/files/files.module.ts",
      "content": "import { Module } from '@nestjs/common';\nimport { FilesService } from './files.service';\nimport { FilesController } from './files.controller';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [ConfigModule],\n  providers: [FilesService],\n  controllers: [FilesController],\n  exports: [FilesService],\n})\nexport class FilesModule {}\n"
    },
    {
      "path": "apps/api/src/files/files.controller.ts",
      "content": "import { Controller, Post, UploadedFile, UseInterceptors, Get, Param, Res, UseGuards, Request, ParseFilePipe, MaxFileSizeValidator, FileTypeValidator } from '@nestjs/common';\nimport { FilesService } from './files.service';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Response } from 'express';\nimport { User } from '@resumate-ai/types';\n\n@Controller('files')\n@UseGuards(AuthGuard('jwt'))\nexport class FilesController {\n  constructor(private readonly filesService: FilesService) {}\n\n  @Post('upload/avatar')\n  @UseInterceptors(FileInterceptor('file'))\n  async uploadAvatar(\n    @Request() req: { user: User },\n    @UploadedFile(new ParseFilePipe({\n      validators: [\n        new MaxFileSizeValidator({ maxSize: 1024 * 1024 * 5 }), // 5MB\n        new FileTypeValidator({ fileType: 'image/(jpeg|png|webp)' }),\n      ],\n    }))\n    file: Express.Multer.File,\n  ) {\n    const path = `avatars/${req.user.id}/${Date.now()}-${file.originalname}`;\n    const url = await this.filesService.uploadFile(file.buffer, path, file.mimetype);\n    // You might want to update the user's avatar URL in the database here\n    return { url };\n  }\n\n  @Get('download/:key(*)') // Catch-all for file key\n  async downloadFile(@Param('key') key: string, @Res() res: Response) {\n    const { stream, contentType } = await this.filesService.getFile(key);\n    res.set({ 'Content-Type': contentType });\n    stream.pipe(res);\n  }\n}\n"
    },
    {
      "path": "apps/api/src/files/files.service.ts",
      "content": "import { Injectable, Logger, InternalServerErrorException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { S3 } from 'aws-sdk'; // Assuming AWS SDK V2 for simplicity, V3 has @aws-sdk/client-s3\nimport { Readable } from 'stream';\n\n@Injectable()\nexport class FilesService {\n  private readonly s3: S3;\n  private readonly s3BucketName: string;\n  private readonly logger = new Logger(FilesService.name);\n\n  constructor(private configService: ConfigService) {\n    this.s3BucketName = this.configService.get<string>('AWS_S3_BUCKET_NAME')!;\n    const s3Endpoint = this.configService.get<string>('AWS_S3_ENDPOINT');\n\n    this.s3 = new S3({\n      accessKeyId: this.configService.get<string>('AWS_ACCESS_KEY_ID'),\n      secretAccessKey: this.configService.get<string>('AWS_SECRET_ACCESS_KEY'),\n      region: this.configService.get<string>('AWS_REGION'),\n      ...(s3Endpoint && { endpoint: s3Endpoint, s3ForcePathStyle: true }), // For MinIO local S3\n    });\n  }\n\n  async uploadFile(fileBuffer: Buffer, fileName: string, contentType: string): Promise<string> {\n    try {\n      const uploadResult = await this.s3.upload({\n        Bucket: this.s3BucketName,\n        Key: fileName,\n        Body: fileBuffer,\n        ContentType: contentType,\n        ACL: 'public-read', // Or define more restrictive policies\n      }).promise();\n      this.logger.log(`File uploaded: ${uploadResult.Location}`);\n      return uploadResult.Location;\n    } catch (error) {\n      this.logger.error('Failed to upload file to S3', error.stack);\n      throw new InternalServerErrorException('Failed to upload file');\n    }\n  }\n\n  async getFile(fileName: string): Promise<{ stream: Readable; contentType: string }> {\n    try {\n      const params = {\n        Bucket: this.s3BucketName,\n        Key: fileName,\n      };\n      const data = await this.s3.getObject(params).promise();\n\n      if (!data.Body || !data.ContentType) {\n        throw new InternalServerErrorException('File content or type missing from S3 response');\n      }\n\n      return {\n        stream: data.Body as Readable,\n        contentType: data.ContentType,\n      };\n    } catch (error) {\n      this.logger.error(`Failed to get file from S3: ${fileName}`, error.stack);\n      throw new InternalServerErrorException('Failed to retrieve file');\n    }\n  }\n}\n"
    },
    {
      "path": "apps/api/src/pdf-generator/pdf-generator.module.ts",
      "content": "import { Module } from '@nestjs/common';\nimport { PdfGeneratorService } from './pdf-generator.service';\n\n@Module({\n  providers: [PdfGeneratorService],\n  exports: [PdfGeneratorService],\n})\nexport class PdfGeneratorModule {}\n"
    },
    {
      "path": "apps/api/src/pdf-generator/pdf-generator.service.ts",
      "content": "import { Injectable, Logger, InternalServerErrorException } from '@nestjs/common';\nimport * as puppeteer from 'puppeteer';\n\n@Injectable()\nexport class PdfGeneratorService {\n  private readonly logger = new Logger(PdfGeneratorService.name);\n\n  // This method would dynamically insert resume data into an HTML template\n  // For simplicity, this boilerplate just returns the content as is.\n  // In a real app, you might use a templating engine like Handlebars or EJS here.\n  renderTemplate(htmlContent: string, data: Record<string, any>): string {\n    // Example: Replace placeholders like {{name}}, {{email}} with actual data\n    let renderedHtml = htmlContent;\n    for (const key in data) {\n      if (Object.prototype.hasOwnProperty.call(data, key)) {\n        const placeholder = new RegExp(`{{${key}}}`, 'g');\n        renderedHtml = renderedHtml.replace(placeholder, data[key]);\n      }\n    }\n    return renderedHtml;\n  }\n\n  async generatePdf(html: string): Promise<Buffer> {\n    let browser: puppeteer.Browser | undefined;\n    try {\n      browser = await puppeteer.launch({\n        headless: true,\n        args: ['--no-sandbox', '--disable-setuid-sandbox'],\n      });\n      const page = await browser.newPage();\n\n      // Set content directly, or navigate to a local file/server endpoint\n      await page.setContent(html, { waitUntil: 'networkidle0' });\n\n      // Generate PDF with options\n      const pdfBuffer = await page.pdf({\n        format: 'A4',\n        printBackground: true,\n        margin: { top: '1cm', right: '1cm', bottom: '1cm', left: '1cm' },\n      });\n\n      this.logger.log('PDF generated successfully.');\n      return pdfBuffer;\n    } catch (error) {\n      this.logger.error('Failed to generate PDF:', error.stack);\n      throw new InternalServerErrorException('Failed to generate PDF');\n    } finally {\n      if (browser) {\n        await browser.close();\n      }\n    }\n  }\n}\n"
    },
    {
      "path": "apps/api/src/config/index.ts",
      "content": "import { registerAs } from '@nestjs/config';\n\nexport default registerAs('app', () => ({\n  port: parseInt(process.env.PORT || '3001', 10),\n  jwtSecret: process.env.JWT_SECRET,\n  aws: {\n    accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n    region: process.env.AWS_REGION,\n    s3BucketName: process.env.AWS_S3_BUCKET_NAME,\n    s3Endpoint: process.env.AWS_S3_ENDPOINT, // For MinIO\n  },\n  database: {\n    url: process.env.DATABASE_URL,\n  },\n}));\n"
    },
    {
      "path": "apps/api/src/main.ts",
      "content": "import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { Logger, ValidationPipe } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const configService = app.get(ConfigService);\n  const port = configService.get<number>('app.port') || 3001;\n\n  app.enableCors({\n    origin: configService.get<string>('NEXT_PUBLIC_APP_URL'), // Allow frontend origin\n    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n    credentials: true,\n  });\n  app.setGlobalPrefix('api'); // All API routes will be prefixed with /api\n  app.useGlobalPipes(new ValidationPipe({ whitelist: true, transform: true }));\n\n  await app.listen(port);\n  Logger.log(`Backend Application is running on: http://localhost:${port}/api`);\n}\nbootstrap();\n"
    },
    {
      "path": "apps/api/src/app.module.ts",
      "content": "import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport { TemplatesModule } from './templates/templates.module';\nimport { ResumesModule } from './resumes/resumes.module';\nimport { FilesModule } from './files/files.module';\nimport { PdfGeneratorModule } from './pdf-generator/pdf-generator.module';\nimport appConfig from './config'; // Import the default exported configuration\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      load: [appConfig],\n      isGlobal: true,\n      envFilePath: `../../.env` // Load .env from monorepo root\n    }),\n    AuthModule,\n    UsersModule,\n    TemplatesModule,\n    ResumesModule,\n    FilesModule,\n    PdfGeneratorModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n"
    },
    {
      "path": "apps/api/Dockerfile",
      "content": "# Use an official Node.js runtime as a parent image\nFROM node:18-alpine\n\n# Set the working directory to /app\nWORKDIR /app\n\n# Copy package.json and yarn.lock (if using Yarn)\nCOPY package.json yarn.lock* ./ # Copy current package.json and yarn.lock\n\n# Install app dependencies\n# Make sure to install from the monorepo root if running `yarn install` from there\n# For simplicity, assuming the api's package.json is sufficient for its dependencies\nRUN yarn install --frozen-lockfile --production\n\n# Copy the rest of the application code\nCOPY . .\n\n# Build the NestJS application\nRUN yarn build\n\n# Expose the port the app runs on\nEXPOSE 3001\n\n# Run the application\nCMD [\"yarn\", \"start:prod\"]\n"
    },
    {
      "path": "apps/api/nest-cli.json",
      "content": "{\n  \"collection\": \"@nestjs/schematics\",\n  \"sourceRoot\": \"src\",\n  \"compilerOptions\": {\n    \"deleteOutDir\": true,\n    \"assets\": [\n      {\n        \"include\": \"**/*.hbs\",\n        \"outDir\": \"dist/src\",\n        \"watch\": true\n      }\n    ]\n  }\n}\n"
    },
    {
      "path": "apps/api/package.json",
      "content": "{\n  \"name\": \"@resumate-ai/api\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"description\": \"Resumate AI Backend API\",\n  \"author\": \"Your Name\",\n  \"license\": \"UNLICENSED\",\n  \"scripts\": {\n    \"build\": \"nest build\",\n    \"format\": \"prettier --write \\\"src/**/*.ts\\\" \\\"test/**/*.ts\\\"\",\n    \"start\": \"nest start\",\n    \"start:dev\": \"nest start --watch\",\n    \"start:debug\": \"nest start --debug --watch\",\n    \"start:prod\": \"node dist/main\",\n    \"lint\": \"eslint \\\"{src,apps,libs,test}/**/*.ts\\\" --fix\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"test:cov\": \"jest --coverage\",\n    \"test:debug\": \"node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand\",\n    \"test:e2e\": \"jest --config ./test/jest-e2e.json\"\n  },\n  \"dependencies\": {\n    \"@nestjs/common\": \"^10.0.0\",\n    \"@nestjs/config\": \"^3.0.0\",\n    \"@nestjs/core\": \"^10.0.0\",\n    \"@nestjs/jwt\": \"^10.0.0\",\n    \"@nestjs/mapped-types\": \"*\",\n    \"@nestjs/passport\": \"^10.0.0\",\n    \"@nestjs/platform-express\": \"^10.0.0\",\n    \"@prisma/client\": \"^5.0.0\",\n    \"aws-sdk\": \"^2.1432.0\",\n    \"bcrypt\": \"^5.1.0\",\n    \"class-transformer\": \"^0.5.1\",\n    \"class-validator\": \"^0.14.0\",\n    \"passport\": \"^0.6.0\",\n    \"passport-jwt\": \"^4.0.1\",\n    \"pg\": \"^8.11.1\",\n    \"puppeteer\": \"^21.0.0\",\n    \"reflect-metadata\": \"^0.1.13\",\n    \"rxjs\": \"^7.8.1\"\n  },\n  \"devDependencies\": {\n    \"@nestjs/cli\": \"^10.0.0\",\n    \"@nestjs/schematics\": \"^10.0.0\",\n    \"@nestjs/testing\": \"^10.0.0\",\n    \"@types/bcrypt\": \"^5.0.0\",\n    \"@types/express\": \"^4.17.17\",\n    \"@types/jest\": \"^29.5.2\",\n    \"@types/node\": \"^20.3.1\",\n    \"@types/passport-jwt\": \"^3.0.9\",\n    \"@types/supertest\": \"^2.0.12\",\n    \"eslint\": \"^8.42.0\",\n    \"eslint-config-prettier\": \"^9.0.0\",\n    \"eslint-plugin-prettier\": \"^5.0.0\",\n    \"jest\": \"^29.5.0\",\n    \"prettier\": \"^3.0.0\",\n    \"source-map-support\": \"^0.5.21\",\n    \"supertest\": \"^6.3.3\",\n    \"ts-jest\": \"^29.1.0\",\n    \"ts-loader\": \"^9.4.3\",\n    \"ts-node\": \"^10.9.1\",\n    \"tsconfig-paths\": \"^4.2.0\",\n    \"typescript\": \"^5.1.3\"\n  },\n  \"jest\": {\n    \"moduleFileExtensions\": [\n      \"js\",\n      \"json\",\n      \"ts\"\n    ],\n    \"rootDir\": \"src\",\n    \"testRegex\": \".*(spec|e2e-spec).ts$\",\n    \"transform\": {\n      \"^.+\\.(t|j)s$\": \"ts-jest\"\n    },\n    \"collectCoverageFrom\": [\n      \"**/*.(t|j)s\"\n    ],\n    \"coverageDirectory\": \"../coverage\",\n    \"testEnvironment\": \"node\"\n  }\n}\n"
    },
    {
      "path": "apps/api/tsconfig.json",
      "content": "{\n  \"extends\": \"../../tsconfig.json\",\n  \"compilerOptions\": {\n    \"outDir\": \"./dist\",\n    \"baseUrl\": \"./\",\n    \"rootDir\": \"./src\",\n    \"paths\": {\n      \"@app/*\": [\"src/*\"]\n    },\n    \"declaration\": false,\n    \"removeComments\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"target\": \"ES2021\",\n    \"sourceMap\": true,\n    \"incremental\": true,\n    \"skipLibCheck\": true,\n    \"strictNullChecks\": false,\n    \"noImplicitAny\": false,\n    \"strictBindCallApply\": false,\n    \"forceConsistentCasingInFileNames\": false,\n    \"noFallthroughCasesInSwitch\": false\n  },\n  \"include\": [\"src/**/*.ts\", \"../../packages/types/**/*.ts\", \"../../packages/db/**/*.ts\"],\n  \"exclude\": [\"node_modules\", \"dist\"]\n}\n"
    },
    {
      "path": "apps/web/public/favicon.ico",
      "content": ""
    },
    {
      "path": "apps/web/src/app/(auth)/login/page.tsx",
      "content": "import { LoginForm } from '@/components/auth/LoginForm';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport Link from 'next/link';\n\nexport default function LoginPage() {\n  return (\n    <div className=\"flex items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900\">\n      <Card className=\"w-full max-w-md mx-auto\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl\">Login to Resumate AI</CardTitle>\n          <CardDescription>Enter your email and password to access your account.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <LoginForm />\n          <p className=\"mt-4 text-center text-sm text-gray-600 dark:text-gray-400\">\n            Don&apos;t have an account?{' '}\n            <Link href=\"/register\" className=\"font-medium text-blue-600 hover:underline\">\n              Sign Up\n            </Link>\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"
    },
    {
      "path": "apps/web/src/app/(auth)/register/page.tsx",
      "content": "import { RegisterForm } from '@/components/auth/RegisterForm';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport Link from 'next/link';\n\nexport default function RegisterPage() {\n  return (\n    <div className=\"flex items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900\">\n      <Card className=\"w-full max-w-md mx-auto\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl\">Create a Resumate AI Account</CardTitle>\n          <CardDescription>Enter your details below to get started.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <RegisterForm />\n          <p className=\"mt-4 text-center text-sm text-gray-600 dark:text-gray-400\">\n            Already have an account?{' '}\n            <Link href=\"/login\" className=\"font-medium text-blue-600 hover:underline\">\n              Log In\n            </Link>\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"
    },
    {
      "path": "apps/web/src/app/(main)/dashboard/page.tsx",
      "content": "import { Button } from '@/components/ui/button';\nimport Link from 'next/link';\n\nexport default function DashboardPage() {\n  return (\n    <div className=\"container mx-auto py-8\">\n      <h1 className=\"text-3xl font-bold mb-6\">Dashboard</h1>\n      <p className=\"text-lg mb-4\">Welcome to your Resumate AI dashboard! Manage your resumes and explore templates.</p>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md\">\n          <h2 className=\"text-xl font-semibold mb-3\">My Resumes</h2>\n          <p className=\"text-gray-600 dark:text-gray-400 mb-4\">View and manage all your created resumes.</p>\n          <Button asChild><Link href=\"/dashboard/resumes\">Go to Resumes</Link></Button>\n        </div>\n        <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md\">\n          <h2 className=\"text-xl font-semibold mb-3\">Explore Templates</h2>\n          <p className=\"text-gray-600 dark:text-gray-400 mb-4\">Browse a wide variety of professional resume templates.</p>\n          <Button asChild><Link href=\"/dashboard/templates\">Browse Templates</Link></Button>\n        </div>\n        <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md\">\n          <h2 className=\"text-xl font-semibold mb-3\">Account Settings</h2>\n          <p className=\"text-gray-600 dark:text-gray-400 mb-4\">Update your profile information and preferences.</p>\n          <Button asChild><Link href=\"/dashboard/settings\">Manage Settings</Link></Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "path": "apps/web/src/app/(main)/templates/page.tsx",
      "content": "import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport Link from 'next/link';\nimport Image from 'next/image';\n\n// Dummy data for templates\nconst templates = [\n  { id: '1', name: 'Modern Professional', imageUrl: '/template-modern.png' },\n  { id: '2', name: 'Minimalist Clean', imageUrl: '/template-minimal.png' },\n  { id: '3', name: 'Creative Portfolio', imageUrl: '/template-creative.png' },\n];\n\nexport default function TemplatesPage() {\n  return (\n    <div className=\"container mx-auto py-8\">\n      <h1 className=\"text-3xl font-bold mb-6\">Browse Templates</h1>\n      <p className=\"text-lg mb-6\">Choose from our collection of professionally designed resume templates.</p>\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {templates.map(template => (\n          <Card key={template.id} className=\"flex flex-col\">\n            <CardHeader>\n              <CardTitle>{template.name}</CardTitle>\n            </CardHeader>\n            <CardContent className=\"flex-grow\">\n              {template.imageUrl && (\n                <div className=\"relative w-full h-48 mb-4 border rounded-md overflow-hidden\">\n                  <Image src={template.imageUrl} alt={template.name} layout=\"fill\" objectFit=\"cover\" />\n                </div>\n              )}\n              <p className=\"text-gray-600 dark:text-gray-400\">A clean and modern template suitable for all professions.</p>\n            </CardContent>\n            <CardFooter className=\"justify-end\">\n              <Button asChild>\n                <Link href={`/dashboard/resume/new?templateId=${template.id}`}>Use Template</Link>\n              </Button>\n            </CardFooter>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}\n"
    },
    {
      "path": "apps/web/src/app/(main)/resume/[id]/page.tsx",
      "content": "import { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { notFound } from 'next/navigation';\nimport Link from 'next/link';\n\ninterface ResumeDetailPageProps {\n  params: { id: string };\n}\n\n// Dummy data for a resume (in a real app, this would be fetched from API)\nconst dummyResume = {\n  id: 'abc-123',\n  templateName: 'Modern Professional',\n  data: {\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n    phone: '123-456-7890',\n    summary: 'Highly motivated and results-oriented professional with a proven track record...', \n    experience: [\n      { title: 'Software Engineer', company: 'Tech Corp', years: '2020-Present' },\n    ],\n    education: [\n      { degree: 'M.Sc. Computer Science', university: 'State University', year: '2020' },\n    ],\n  },\n  pdfUrl: '/dummy-resume.pdf', // Example PDF URL\n};\n\nexport default function ResumeDetailPage({ params }: ResumeDetailPageProps) {\n  const { id } = params;\n\n  // In a real app, fetch resume data based on 'id'\n  const resume = id === 'new' ? null : dummyResume; // Simulate fetching or creating new\n\n  if (id !== 'new' && !resume) {\n    notFound();\n  }\n\n  const isNew = id === 'new';\n\n  return (\n    <div className=\"container mx-auto py-8\">\n      <h1 className=\"text-3xl font-bold mb-6\">{isNew ? 'Create New Resume' : `Edit Resume: ${resume?.templateName}`}</h1>\n      \n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle>{isNew ? 'Resume Details' : 'Resume Data'}</CardTitle>\n          <CardDescription>Fill in your personal information, experience, and education.</CardDescription>\n        </CardHeader>\n        <CardContent className=\"grid gap-4\">\n          {/* Basic form fields - use React Hook Form for full implementation */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"name\">Full Name</Label>\n              <Input id=\"name\" defaultValue={resume?.data.name || ''} placeholder=\"John Doe\" />\n            </div>\n            <div>\n              <Label htmlFor=\"email\">Email</Label>\n              <Input id=\"email\" type=\"email\" defaultValue={resume?.data.email || ''} placeholder=\"john.doe@example.com\" />\n            </div>\n            <div>\n              <Label htmlFor=\"phone\">Phone</Label>\n              <Input id=\"phone\" defaultValue={resume?.data.phone || ''} placeholder=\"(123) 456-7890\" />\n            </div>\n          </div>\n          <div>\n            <Label htmlFor=\"summary\">Summary</Label>\n            <Textarea id=\"summary\" rows={5} defaultValue={resume?.data.summary || ''} placeholder=\"A brief summary of your professional background...\" />\n          </div>\n          {/* More sections like Experience, Education, Skills would go here, possibly as dynamic lists */}\n        </CardContent>\n      </Card>\n\n      <div className=\"flex justify-end gap-4\">\n        <Button variant=\"outline\" asChild><Link href=\"/dashboard\">Cancel</Link></Button>\n        <Button>{isNew ? 'Save & Generate PDF' : 'Update & Generate PDF'}</Button>\n      </div>\n\n      {!isNew && resume?.pdfUrl && (\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <CardTitle>Generated PDF</CardTitle>\n            <CardDescription>View or download your latest resume PDF.</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <a href={resume.pdfUrl} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-600 hover:underline\">\n              View PDF\n            </a>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n"
    },
    {
      "path": "apps/web/src/app/(main)/settings/page.tsx",
      "content": "import { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useAuth } from '@/hooks/useAuth';\n\nexport default function SettingsPage() {\n  const { user } = useAuth(); // Assuming useAuth provides user data\n\n  return (\n    <div className=\"container mx-auto py-8\">\n      <h1 className=\"text-3xl font-bold mb-6\">Account Settings</h1>\n      <Card>\n        <CardHeader>\n          <CardTitle>Profile Information</CardTitle>\n          <CardDescription>Update your personal details and account settings.</CardDescription>\n        </CardHeader>\n        <CardContent className=\"grid gap-4\">\n          <div>\n            <Label htmlFor=\"name\">Name</Label>\n            <Input id=\"name\" defaultValue={user?.name || ''} />\n          </div>\n          <div>\n            <Label htmlFor=\"email\">Email</Label>\n            <Input id=\"email\" type=\"email\" defaultValue={user?.email || ''} disabled />\n          </div>\n          <Button className=\"w-fit\">Save Changes</Button>\n        </CardContent>\n      </Card>\n\n      <Card className=\"mt-6\">\n        <CardHeader>\n          <CardTitle>Password</CardTitle>\n          <CardDescription>Change your account password.</CardDescription>\n        </CardHeader>\n        <CardContent className=\"grid gap-4\">\n          <div>\n            <Label htmlFor=\"current-password\">Current Password</Label>\n            <Input id=\"current-password\" type=\"password\" />\n          </div>\n          <div>\n            <Label htmlFor=\"new-password\">New Password</Label>\n            <Input id=\"new-password\" type=\"password\" />\n          </div>\n          <div>\n            <Label htmlFor=\"confirm-password\">Confirm New Password</Label>\n            <Input id=\"confirm-password\" type=\"password\" />\n          </div>\n          <Button className=\"w-fit\">Update Password</Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"
    },
    {
      "path": "apps/web/src/app/api/health/route.ts",
      "content": "import { NextResponse } from 'next/server';\n\nexport async function GET() {\n  return NextResponse.json({ status: 'ok', timestamp: new Date().toISOString() });\n}\n"
    },
    {
      "path": "apps/web/src/app/globals.css",
      "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n \n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n \n    --primary: 222.2 47.4% 11.2%;\n    --primary-foreground: 210 40% 98%;\n \n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n \n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n \n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n \n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 222.2 84% 4.9%;\n\n    --radius: 0.5rem;\n  }\n \n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n \n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n   \n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n   \n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n   \n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n   \n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n   \n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n   \n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n   \n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 212.7 26.8% 83.9%;\n  }\n}\n \n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n"
    },
    {
      "path": "apps/web/src/app/layout.tsx",
      "content": "import './globals.css';\nimport type { Metadata } from 'next';\nimport { Inter } from 'next/font/google';\nimport { cn } from '@/lib/utils';\nimport { AuthProvider } from '@/hooks/useAuth';\nimport { ThemeProvider } from '@/components/common/ThemeProvider';\nimport { Toaster } from '@/components/ui/toaster';\n\nconst inter = Inter({ subsets: ['latin'] });\n\nexport const metadata: Metadata = {\n  title: 'Resumate AI - Smart Resume Builder',\n  description: 'Effortlessly create professional and impactful resumes with AI-powered templates.',\n};\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body className={cn('min-h-screen bg-background font-sans antialiased', inter.className)}>\n        <ThemeProvider\n          attribute=\"class\"\n          defaultTheme=\"system\"\n          enableSystem\n          disableTransitionOnChange\n        >\n          <AuthProvider>\n            {children}\n          </AuthProvider>\n          <Toaster />\n        </ThemeProvider>\n      </body>\n    </html>\n  );\n}\n"
    },
    {
      "path": "apps/web/src/app/page.tsx",
      "content": "import Link from 'next/link';\nimport { Button } from '@/components/ui/button';\n\nexport default function HomePage() {\n  return (\n    <main className=\"flex flex-col items-center justify-center min-h-screen p-24 bg-gradient-to-br from-blue-100 to-purple-100 dark:from-blue-900 dark:to-purple-900 text-center\">\n      <h1 className=\"text-5xl md:text-7xl font-extrabold text-gray-900 dark:text-white leading-tight mb-6\">\n        Resumate AI\n      </h1>\n      <p className=\"text-xl md:text-2xl text-gray-700 dark:text-gray-300 mb-8 max-w-2xl\">\n        Craft your perfect resume effortlessly. Choose from professional templates, input your data, and generate high-quality PDFs in minutes.\n      </p>\n      <div className=\"flex gap-4\">\n        <Button asChild size=\"lg\" className=\"px-8 py-3 text-lg\">\n          <Link href=\"/login\">Get Started</Link>\n        </Button>\n        <Button asChild size=\"lg\" variant=\"outline\" className=\"px-8 py-3 text-lg\">\n          <Link href=\"/templates\">Browse Templates</Link>\n        </Button>\n      </div>\n    </main>\n  );\n}\n"
    },
    {
      "path": "apps/web/src/components/common/Button.tsx",
      "content": "import React from 'react';\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  children: React.ReactNode;\n  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';\n  size?: 'sm' | 'md' | 'lg';\n}\n\nconst Button: React.FC<ButtonProps> = ({\n  children,\n  variant = 'primary',\n  size = 'md',\n  className = '',\n  ...props\n}) => {\n  const baseStyles = 'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none';\n\n  const variantStyles = {\n    primary: 'bg-blue-600 text-white hover:bg-blue-700 focus-visible:ring-blue-500',\n    secondary: 'bg-gray-200 text-gray-900 hover:bg-gray-300 focus-visible:ring-gray-500',\n    outline: 'border border-gray-300 bg-white hover:bg-gray-100 focus-visible:ring-gray-500',\n    ghost: 'hover:bg-gray-100 focus-visible:ring-gray-500',\n  }[variant];\n\n  const sizeStyles = {\n    sm: 'h-9 px-3',\n    md: 'h-10 px-4 py-2',\n    lg: 'h-11 px-8',\n  }[size];\n\n  return (\n    <button className={`${baseStyles} ${variantStyles} ${sizeStyles} ${className}`.trim()} {...props}>\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n"
    },
    {
      "path": "apps/web/src/components/common/ThemeProvider.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { ThemeProvider as NextThemesProvider } from 'next-themes';\nimport { type ThemeProviderProps } from 'next-themes/dist/types';\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;\n}\n"
    },
    {
      "path": "apps/web/src/components/auth/LoginForm.tsx",
      "content": "'use client';\n\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useRouter } from 'next/navigation';\nimport { useToast } from '@/components/ui/use-toast';\n\nconst formSchema = z.object({\n  email: z.string().email({ message: 'Invalid email address.' }),\n  password: z.string().min(1, { message: 'Password is required.' }),\n});\n\ntype LoginFormValues = z.infer<typeof formSchema>;\n\nexport function LoginForm() {\n  const router = useRouter();\n  const { login } = useAuth();\n  const { toast } = useToast();\n\n  const form = useForm<LoginFormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  const onSubmit = async (values: LoginFormValues) => {\n    try {\n      await login(values.email, values.password);\n      toast({\n        title: 'Login Successful',\n        description: 'You have been logged in.',\n      });\n      router.push('/dashboard');\n    } catch (error: any) {\n      toast({\n        title: 'Login Failed',\n        description: error.message || 'An error occurred during login.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  return (\n    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n      <div>\n        <Label htmlFor=\"email\">Email</Label>\n        <Input\n          id=\"email\"\n          type=\"email\"\n          placeholder=\"you@example.com\"\n          {...form.register('email')}\n        />\n        {form.formState.errors.email && (\n          <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.email.message}</p>\n        )}\n      </div>\n      <div>\n        <Label htmlFor=\"password\">Password</Label>\n        <Input\n          id=\"password\"\n          type=\"password\"\n          placeholder=\"********\"\n          {...form.register('password')}\n        />\n        {form.formState.errors.password && (\n          <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.password.message}</p>\n        )}\n      </div>\n      <Button type=\"submit\" className=\"w-full\" disabled={form.formState.isSubmitting}>\n        {form.formState.isSubmitting ? 'Logging in...' : 'Login'}\n      </Button>\n    </form>\n  );\n}\n"
    },
    {
      "path": "apps/web/src/components/auth/RegisterForm.tsx",
      "content": "'use client';\n\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useRouter } from 'next/navigation';\nimport { useToast } from '@/components/ui/use-toast';\n\nconst formSchema = z.object({\n  name: z.string().min(1, { message: 'Name is required.' }),\n  email: z.string().email({ message: 'Invalid email address.' }),\n  password: z.string().min(6, { message: 'Password must be at least 6 characters.' }),\n});\n\ntype RegisterFormValues = z.infer<typeof formSchema>;\n\nexport function RegisterForm() {\n  const router = useRouter();\n  const { register } = useAuth();\n  const { toast } = useToast();\n\n  const form = useForm<RegisterFormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: '',\n      email: '',\n      password: '',\n    },\n  });\n\n  const onSubmit = async (values: RegisterFormValues) => {\n    try {\n      await register(values.name, values.email, values.password);\n      toast({\n        title: 'Registration Successful',\n        description: 'Your account has been created. Please log in.',\n      });\n      router.push('/login');\n    } catch (error: any) {\n      toast({\n        title: 'Registration Failed',\n        description: error.message || 'An error occurred during registration.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  return (\n    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n      <div>\n        <Label htmlFor=\"name\">Full Name</Label>\n        <Input\n          id=\"name\"\n          placeholder=\"John Doe\"\n          {...form.register('name')}\n        />\n        {form.formState.errors.name && (\n          <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.name.message}</p>\n        )}\n      </div>\n      <div>\n        <Label htmlFor=\"email\">Email</Label>\n        <Input\n          id=\"email\"\n          type=\"email\"\n          placeholder=\"you@example.com\"\n          {...form.register('email')}\n        />\n        {form.formState.errors.email && (\n          <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.email.message}</p>\n        )}\n      </div>\n      <div>\n        <Label htmlFor=\"password\">Password</Label>\n        <Input\n          id=\"password\"\n          type=\"password\"\n          placeholder=\"********\"\n          {...form.register('password')}\n        />\n        {form.formState.errors.password && (\n          <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.password.message}</p>\n        )}\n      </div>\n      <Button type=\"submit\" className=\"w-full\" disabled={form.formState.isSubmitting}>\n        {form.formState.isSubmitting ? 'Registering...' : 'Register'}\n      </Button>\n    </form>\n  );\n}\n"
    },
    {
      "path": "apps/web/src/components/ui/button.tsx",
      "content": "import * as React from 'react';\nimport { Slot } from '@radix-ui/react-slot';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground hover:bg-primary/90',\n        destructive:\n          'bg-destructive text-destructive-foreground hover:bg-destructive/90',\n        outline:\n          'border border-input bg-background hover:bg-accent hover:text-accent-foreground',\n        secondary:\n          'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-10 px-4 py-2',\n        sm: 'h-9 rounded-md px-3',\n        lg: 'h-11 rounded-md px-8',\n        icon: 'h-10 w-10',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : 'button';\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };\n"
    },
    {
      "path": "apps/web/src/components/ui/card.tsx",
      "content": "import * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nconst Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(\n        'rounded-xl border bg-card text-card-foreground shadow',\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nCard.displayName = 'Card';\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn('flex flex-col space-y-1.5 p-6', className)}\n    {...props}\n  />\n));\nCardHeader.displayName = 'CardHeader';\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      'font-semibold leading-none tracking-tight',\n      className,\n    )}\n    {...props}\n  />\n));\nCardTitle.displayName = 'CardTitle';\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn('text-sm text-muted-foreground', className)}\n    {...props}\n  />\n));\nCardDescription.displayName = 'CardDescription';\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />\n));\nCardContent.displayName = 'CardContent';\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn('flex items-center p-6 pt-0', className)}\n    {...props}\n  />\n));\nCardFooter.displayName = 'CardFooter';\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent };\n"
    },
    {
      "path": "apps/web/src/components/ui/input.tsx",
      "content": "import * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\n          className,\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nInput.displayName = 'Input';\n\nexport { Input };\n"
    },
    {
      "path": "apps/web/src/components/ui/label.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport * as LabelPrimitive from '@radix-ui/react-label';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst labelVariants = cva(\n  'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',\n);\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> & VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n));\nLabel.displayName = LabelPrimitive.Root.displayName;\n\nexport { Label };\n"
    },
    {
      "path": "apps/web/src/components/ui/textarea.tsx",
      "content": "import * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\n          className,\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nTextarea.displayName = 'Textarea';\n\nexport { Textarea };\n"
    },
    {
      "path": "apps/web/src/components/ui/toaster.tsx",
      "content": "'use client';\n\nimport { Toast, ToastClose, ToastDescription, ToastProvider, ToastTitle, ToastViewport } from '@/components/ui/toast';\nimport { useToast } from '@/components/ui/use-toast';\n\nexport function Toaster() {\n  const { toasts } = useToast();\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        );\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  );\n}\n"
    },
    {
      "path": "apps/web/src/components/ui/toast.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport * as ToastPrimitives from '@radix-ui/react-toast';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { X } from 'lucide-react';\n\nimport { cn } from '@/lib/utils';\n\nconst ToastProvider = ToastPrimitives.Provider;\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',\n      className,\n    )}\n    {...props}\n  />\n));\nToastViewport.displayName = ToastPrimitives.Viewport.displayName;\n\nconst toastVariants = cva(\n  'group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',\n  {\n    variants: {\n      variant: {\n        default:\n          'border bg-background text-foreground',\n        destructive:\n          'destructive group border-destructive bg-destructive text-destructive-foreground',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> & VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  );\n});\nToast.displayName = ToastPrimitives.Root.displayName;\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      'inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background hover:bg-secondary focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus-visible:ring-destructive',\n      className,\n    )}\n    {...props}\n  />\n));\nToastAction.displayName = ToastPrimitives.Action.displayName;\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      'absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus-visible:ring-2 group-hover:opacity-100',\n      className,\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n));\nToastClose.displayName = ToastPrimitives.Close.displayName;\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn('text-sm font-semibold', className)}\n    {...props}\n  />\n));\nToastTitle.displayName = ToastPrimitives.Title.displayName;\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn('text-sm opacity-90', className)}\n    {...props}\n  />\n));\nToastDescription.displayName = ToastPrimitives.Description.displayName;\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>;\n\nexport { type ToastProps, type ToastActionElement, ToastProvider, ToastViewport, Toast, ToastTitle, ToastDescription, ToastClose, ToastAction };\n"
    },
    {
      "path": "apps/web/src/components/ui/use-toast.ts",
      "content": "// @ts-nocheck - This file is typically copied from Shadcn/ui and might have internal types.\n\nimport * as React from 'react';\nimport { ToastActionElement, ToastProps } from '@/components/ui/toast';\n\nconst TOAST_LIMIT = 1; // You can increase this to show multiple toasts\nconst TOAST_REMOVE_DELAY = 1000000; // Keep toasts visible for a long time until manually dismissed\n\ntype ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n};\n\nconst actionTypes = {\n  ADD_TOAST: 'ADD_TOAST',\n  UPDATE_TOAST: 'UPDATE_TOAST',\n  DISMISS_TOAST: 'DISMISS_TOAST',\n  REMOVE_TOAST: 'REMOVE_TOAST',\n} as const;\n\ntype ActionType = typeof actionTypes;\n\ntype Action = \n  | { type: ActionType['ADD_TOAST']; toast: ToasterToast }\n  | { type: ActionType['UPDATE_TOAST']; toast: Partial<ToasterToast> }\n  | { type: ActionType['DISMISS_TOAST']; toastId?: ToasterToast['id'] }\n  | { type: ActionType['REMOVE_TOAST']; toastId?: ToasterToast['id'] };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case actionTypes.ADD_TOAST:\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case actionTypes.UPDATE_TOAST:\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      };\n\n    case actionTypes.DISMISS_TOAST:\n      const { toastId } = action;\n\n      // ! Side effects ! - This means all toasts will be dismissed.\n      // annotate that toast as dismissed, and remove it after the timeout\n      if (toastId) {\n        return {\n          ...state,\n          toasts: state.toasts.map((t) =>\n            t.id === toastId ? { ...t, open: false } : t\n          ),\n        };\n      } else {\n        return {\n          ...state,\n          toasts: state.toasts.map((t) => ({ ...t, open: false })),\n        };\n      }\n\n    case actionTypes.REMOVE_TOAST:\n      if (action.toastId === undefined) {\n        return { ...state, toasts: [] };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n    default:\n      throw new Error();\n  }\n};\n\nconst listeners: ((state: State) => void)[] = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => listener(memoryState));\n}\n\ntype Toast = Omit<ToasterToast, 'id'>;\n\nfunction toast({ ...props }: Toast) {\n  const id = generateId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: actionTypes.UPDATE_TOAST,\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: actionTypes.DISMISS_TOAST, toastId: id });\n\n  dispatch({\n    type: actionTypes.ADD_TOAST,\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return { id: id, dismiss, update };\n}\n\nfunction generateId() {\n  return Math.random().toString(36).substring(2, 9);\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: React.useCallback(\n      (toastId?: string) => dispatch({ type: actionTypes.DISMISS_TOAST, toastId }),\n      []\n    ),\n  };\n}\n\nexport { useToast, toast };\n"
    },
    {
      "path": "apps/web/src/hooks/useAuth.ts",
      "content": "'use client';\n\nimport { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { User } from '@resumate-ai/types'; // Assuming shared User type\nimport { API_BASE_URL } from '@/lib/api'; // Your API base URL\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (name: string, email: string, password: string) => Promise<void>;\n  logout: () => void;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const router = useRouter();\n\n  const fetchUserProfile = useCallback(async () => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      try {\n        const response = await fetch(`${API_BASE_URL}/auth/profile`, {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        if (response.ok) {\n          const userData: User = await response.json();\n          setUser(userData);\n        } else {\n          console.error('Failed to fetch profile:', response.statusText);\n          localStorage.removeItem('authToken');\n          setUser(null);\n        }\n      } catch (error) {\n        console.error('Error fetching profile:', error);\n        localStorage.removeItem('authToken');\n        setUser(null);\n      } finally {\n        setIsLoading(false);\n      }\n    } else {\n      setIsLoading(false);\n      setUser(null);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchUserProfile();\n  }, [fetchUserProfile]);\n\n  const login = async (email: string, password: string) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Login failed');\n      }\n\n      const data = await response.json();\n      localStorage.setItem('authToken', data.accessToken);\n      await fetchUserProfile(); // Refetch user profile after successful login\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const register = async (name: string, email: string, password: string) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ name, email, password }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Registration failed');\n      }\n      await response.json(); // Don't store token here, redirect to login\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = useCallback(() => {\n    localStorage.removeItem('authToken');\n    setUser(null);\n    router.push('/login');\n  }, [router]);\n\n  const value = {\n    user,\n    isAuthenticated: !!user,\n    login,\n    register,\n    logout,\n    isLoading,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n"
    },
    {
      "path": "apps/web/src/lib/api.ts",
      "content": "import { QueryClient } from '@tanstack/react-query';\n\nexport const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001/api';\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 1000 * 60 * 5, // 5 minutes\n      cacheTime: 1000 * 60 * 10, // 10 minutes\n      refetchOnWindowFocus: false,\n      retry: 2,\n      onError: (error) => {\n        console.error('Query Error:', error);\n        // Optionally trigger a toast or error message\n      },\n    },\n    mutations: {\n      onError: (error) => {\n        console.error('Mutation Error:', error);\n        // Optionally trigger a toast or error message\n      },\n    },\n  },\n});\n\n// Generic fetcher for TanStack Query\nexport const fetcher = async <TData = unknown>(url: string, options?: RequestInit): Promise<TData> => {\n  const token = localStorage.getItem('authToken');\n  const headers: HeadersInit = {\n    'Content-Type': 'application/json',\n    ...(token && { Authorization: `Bearer ${token}` }),\n  };\n\n  const response = await fetch(`${API_BASE_URL}${url}`, {\n    ...options,\n    headers: { ...headers, ...options?.headers },\n  });\n\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || 'An API error occurred');\n  }\n\n  return response.json() as TData;\n};\n"
    },
    {
      "path": "apps/web/src/lib/utils.ts",
      "content": "import { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n"
    },
    {
      "path": "apps/web/src/styles/index.ts",
      "content": "// This file can be used for custom client-side styling imports if needed,\n// beyond what's directly in globals.css or component styles.\n// For example, importing a specific font or a custom utility class CSS file.\n\n// import './custom-utilities.css';\n"
    },
    {
      "path": "apps/web/Dockerfile",
      "content": "# Use an official Node.js runtime as a parent image\nFROM node:18-alpine AS base\n\n# Install dependencies only when needed\nFROM base AS deps\nWORKDIR /app\nCOPY package.json yarn.lock* ./ # Copy root package.json and yarn.lock\nCOPY apps/web/package.json apps/web/ # Copy web's package.json\nCOPY packages/ui/package.json packages/ui/ # Copy ui's package.json\n# ... (copy other package.json files for monorepo)\nRUN yarn install --immutable\n\n# Rebuild the source code only when needed\nFROM base AS builder\nWORKDIR /app\nCOPY --from=deps /app/node_modules ./node_modules\nCOPY . .\n# Build the Next.js application\nRUN yarn workspace @resumate-ai/web build\n\n# Production image\nFROM base AS runner\nWORKDIR /app\n\nENV NODE_ENV production\n\n# Uncomment the following line if you're using Prisma\n# COPY --from=builder /app/node_modules/.prisma/client ./node_modules/.prisma/client\n\nCOPY --from=builder /app/apps/web/next.config.js ./\nCOPY --from=builder /app/apps/web/public ./public\nCOPY --from=builder /app/apps/web/.next ./.next\nCOPY --from=builder /app/node_modules ./node_modules\n\nEXPOSE 3000\n\n# Next.js production command (starts the server)\nCMD [\"yarn\", \"workspace\", \"@resumate-ai/web\", \"start\"]\n"
    },
    {
      "path": "apps/web/next.config.js",
      "content": "/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  transpilePackages: ['@resumate-ai/ui', '@resumate-ai/config', '@resumate-ai/types'],\n  experimental: {\n    appDir: true,\n    outputFileTracingIgnores: ['**@aws-sdk/client-s3**'] // Ignore if AWS SDK is not directly used in Next.js build\n  },\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'resumate-pdfs-bucket.s3.amazonaws.com', // Example S3 bucket for templates/generated PDFs\n        port: '',\n        pathname: '/**', \n      },\n      {\n        protocol: 'http',\n        hostname: 'localhost', // For local MinIO during development\n        port: '9000',\n        pathname: '/**', \n      },\n    ],\n  },\n};\n\nmodule.exports = nextConfig;\n"
    },
    {
      "path": "apps/web/package.json",
      "content": "{\n  \"name\": \"@resumate-ai/web\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev -p 3000\",\n    \"build\": \"next build\",\n    \"start\": \"next start -p 3000\",\n    \"lint\": \"next lint\"\n  },\n  \"dependencies\": {\n    \"@hookform/resolvers\": \"^3.3.1\",\n    \"@radix-ui/react-label\": \"^2.0.2\",\n    \"@radix-ui/react-slot\": \"^1.0.2\",\n    \"@radix-ui/react-toast\": \"^1.1.5\",\n    \"@resumate-ai/config\": \"*\",\n    \"@resumate-ai/types\": \"*\",\n    \"@resumate-ai/ui\": \"*\",\n    \"@tanstack/react-query\": \"^4.33.0\",\n    \"class-variance-authority\": \"^0.7.0\",\n    \"clsx\": \"^2.0.0\",\n    \"lucide-react\": \"^0.274.0\",\n    \"next\": \"14.0.0\",\n    \"next-themes\": \"^0.2.1\",\n    \"react\": \"^18\",\n    \"react-dom\": \"^18\",\n    \"react-hook-form\": \"^7.46.1\",\n    \"tailwind-merge\": \"^1.14.0\",\n    \"tailwindcss-animate\": \"^1.0.7\",\n    \"zod\": \"^3.22.2\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20\",\n    \"@types/react\": \"^18\",\n    \"@types/react-dom\": \"^18\",\n    \"autoprefixer\": \"^10.0.1\",\n    \"eslint\": \"^8\",\n    \"eslint-config-next\": \"14.0.0\",\n    \"postcss\": \"^8\",\n    \"tailwindcss\": \"^3.3.0\",\n    \"typescript\": \"^5\"\n  }\n}\n"
    },
    {
      "path": "apps/web/postcss.config.js",
      "content": "module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n"
    },
    {
      "path": "apps/web/tailwind.config.ts",
      "content": "import type { Config } from 'tailwindcss';\n\nconst config: Config = {\n  darkMode: ['class'],\n  content: [\n    './pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './components/**/*.{js,ts,jsx,tsx,mdx}',\n    './app/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/**/*.{js,ts,jsx,tsx,mdx}',\n    '../../packages/ui/src/**/*.{js,ts,jsx,tsx,mdx}' // Include shared UI components\n  ],\n  theme: {\n    container: {\n      center: true,\n      padding: '2rem',\n      screens: {\n        '2xl': '1400px',\n      },\n    },\n    extend: {\n      colors: {\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        primary: {\n          default: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))',\n        },\n        secondary: {\n          default: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))',\n        },\n        destructive: {\n          default: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--destructive-foreground))',\n        },\n        muted: {\n          default: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))',\n        },\n        accent: {\n          default: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))',\n        },\n        popover: {\n          default: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))',\n        },\n        card: {\n          default: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))',\n        },\n      },\n      borderRadius: {\n        lg: 'var(--radius)',\n        md: 'calc(var(--radius) - 2px)',\n        sm: 'calc(var(--radius) - 4px)',\n      },\n      keyframes: {\n        'accordion-down': {\n          from: { height: '0' },\n          to: { height: 'var(--radix-accordion-content-height)' },\n        },\n        'accordion-up': {\n          from: { height: 'var(--radix-accordion-content-height)' },\n          to: { height: '0' },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n      },\n    },\n  },\n  plugins: [require('tailwindcss-animate')],\n};\n\nexport default config;\n"
    },
    {
      "path": "apps/web/tsconfig.json",
      "content": "{\n  \"extends\": \"../../tsconfig.json\",\n  \"compilerOptions\": {\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"paths\": {\n      \"@/*\": [\"./src/*\"],\n      \"@resumate-ai/config\": [\"../../packages/config/src\"], \n      \"@resumate-ai/types\": [\"../../packages/types/src\"],\n      \"@resumate-ai/ui\": [\"../../packages/ui/src\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\", \"../../packages/ui/**/*.ts\", \"../../packages/types/**/*.ts\", \"../../packages/config/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n"
    },
    {
      "path": "packages/config/index.ts",
      "content": "export const APP_NAME = 'Resumate AI';\nexport const API_VERSION = 'v1';\n\n// Add more shared configuration constants here\nexport const AUTH_TOKEN_STORAGE_KEY = 'authToken';\n\nexport enum TemplateCategories {\n  PROFESSIONAL = 'Professional',\n  MODERN = 'Modern',\n  CREATIVE = 'Creative',\n  MINIMALIST = 'Minimalist',\n}\n"
    },
    {
      "path": "packages/db/schema.prisma",
      "content": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../node_modules/@prisma/client\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id        String    @id @default(uuid())\n  email     String    @unique\n  password  String\n  name      String?\n  createdAt DateTime  @default(now())\n  updatedAt DateTime  @updatedAt\n  resumes   Resume[]\n}\n\nmodel Template {\n  id        String    @id @default(uuid())\n  name      String    @unique\n  imageUrl  String? // Thumbnail for the template\n  content   String    @db.Text // HTML or JSON structure of the template\n  createdAt DateTime  @default(now())\n  updatedAt DateTime  @updatedAt\n  resumes   Resume[]\n}\n\nmodel Resume {\n  id        String    @id @default(uuid())\n  userId    String\n  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  templateId String\n  template  Template  @relation(fields: [templateId], references: [id])\n  data      Json      // JSON blob of resume data (experience, education, skills, etc.)\n  pdfUrl    String?   // URL to the generated PDF in S3\n  createdAt DateTime  @default(now())\n  updatedAt DateTime  @updatedAt\n\n  @@unique([userId, id]) // A user's resume should be uniquely identified by their ID and the resume's ID\n  @@index([userId])\n  @@index([templateId])\n}\n"
    },
    {
      "path": "packages/db/index.ts",
      "content": "import { PrismaClient } from '@prisma/client';\n\nconst prismaClientSingleton = () => {\n  return new PrismaClient();\n};\n\ndeclare global {\n  var prisma: undefined | ReturnType<typeof prismaClientSingleton>;\n}\n\nconst prisma = globalThis.prisma ?? prismaClientSingleton();\n\nexport default prisma; // Export as default for direct import\nexport * from '@prisma/client'; // Export all types and enums from Prisma client\n\n// For NestJS integration (if using a dedicated PrismaModule)\nexport class PrismaService extends PrismaClient {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async onModuleDestroy() {\n    await this.$disconnect();\n  }\n}\n"
    },
    {
      "path": "packages/db/prisma.module.ts",
      "content": "import { Module, Global } from '@nestjs/common';\nimport { PrismaService } from './index'; // Import PrismaService class\n\n@Global() // Make PrismaService available throughout the application\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n"
    },
    {
      "path": "packages/ui/src/components/index.ts",
      "content": "export * from './Button';\n// Add more shared UI components here\n// export * from './AlertDialog';\n// export * from './Form';\n// etc.\n"
    },
    {
      "path": "packages/ui/package.json",
      "content": "{\n  \"name\": \"@resumate-ai/ui\",\n  \"version\": \"0.0.0\",\n  \"main\": \"./src/index.ts\",\n  \"types\": \"./src/index.ts\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"lint\": \"eslint . --ext .ts,.tsx,.js,.jsx\",\n    \"test\": \"echo \\\"No test specified\\\"\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18\",\n    \"react-dom\": \"^18\",\n    \"@radix-ui/react-slot\": \"^1.0.0\",\n    \"class-variance-authority\": \"^0.7.0\",\n    \"clsx\": \"^2.0.0\",\n    \"tailwind-merge\": \"^1.14.0\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"^18\",\n    \"@types/react-dom\": \"^18\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.0.0\",\n    \"@typescript-eslint/parser\": \"^6.0.0\",\n    \"eslint\": \"^8.48.0\",\n    \"eslint-config-prettier\": \"^9.0.0\",\n    \"eslint-plugin-react-hooks\": \"^4.6.0\",\n    \"eslint-plugin-react-refresh\": \"^0.4.3\",\n    \"prettier\": \"^3.0.3\",\n    \"typescript\": \"^5.2.2\"\n  }\n}\n"
    },
    {
      "path": "packages/types/index.ts",
      "content": "// Shared TypeScript interfaces, types, enums (DTOs, models)\n\nexport interface User {\n  id: string;\n  email: string;\n  password?: string; // Should be omitted in frontend or when sending to client\n  name?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Template {\n  id: string;\n  name: string;\n  imageUrl?: string;\n  content: string; // HTML or JSON string\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Resume {\n  id: string;\n  userId: string;\n  templateId: string;\n  data: Record<string, any>; // JSON blob for resume content\n  pdfUrl?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Example DTOs (can be extended with Zod schemas on frontend, class-validator on backend)\nexport interface LoginResponse {\n  accessToken: string;\n}\n\nexport interface UserProfile extends Omit<User, 'password'> {}\n\n// Add more as needed: e.g., Education, Experience, Skill interfaces for resume data\nexport interface ExperienceItem {\n  title: string;\n  company: string;\n  location?: string;\n  startDate: string; // YYYY-MM-DD or YYYY-MM\n  endDate?: string; // YYYY-MM-DD or 'Present'\n  description?: string[]; // Bullet points\n}\n\nexport interface EducationItem {\n  degree: string;\n  major?: string;\n  university: string;\n  location?: string;\n  startDate: string;\n  endDate?: string;\n}\n"
    },
    {
      "path": "infra/aws/vpc.tf",
      "content": "resource \"aws_vpc\" \"resumate_vpc\" {\n  cidr_block = \"10.0.0.0/16\"\n  enable_dns_hostnames = true\n  enable_dns_support   = true\n\n  tags = {\n    Name = \"resumate-ai-vpc\"\n  }\n}\n\nresource \"aws_internet_gateway\" \"resumate_igw\" {\n  vpc_id = aws_vpc.resumate_vpc.id\n\n  tags = {\n    Name = \"resumate-ai-igw\"\n  }\n}\n\nresource \"aws_subnet\" \"resumate_public_subnet_a\" {\n  vpc_id                  = aws_vpc.resumate_vpc.id\n  cidr_block              = \"10.0.1.0/24\"\n  availability_zone       = \"${var.aws_region}a\"\n  map_public_ip_on_launch = true\n\n  tags = {\n    Name = \"resumate-ai-public-subnet-a\"\n  }\n}\n\nresource \"aws_subnet\" \"resumate_private_subnet_a\" {\n  vpc_id            = aws_vpc.resumate_vpc.id\n  cidr_block        = \"10.0.101.0/24\"\n  availability_zone = \"${var.aws_region}a\"\n\n  tags = {\n    Name = \"resumate-ai-private-subnet-a\"\n  }\n}\n\nresource \"aws_route_table\" \"resumate_public_rt\" {\n  vpc_id = aws_vpc.resumate_vpc.id\n\n  route {\n    cidr_block = \"0.0.0.0/0\"\n    gateway_id = aws_internet_gateway.resumate_igw.id\n  }\n\n  tags = {\n    Name = \"resumate-ai-public-rt\"\n  }\n}\n\nresource \"aws_route_table_association\" \"resumate_public_rta_a\" {\n  subnet_id      = aws_subnet.resumate_public_subnet_a.id\n  route_table_id = aws_route_table.resumate_public_rt.id\n}\n\n# More subnets and NAT gateways would be added for high availability across AZs\n"
    },
    {
      "path": "infra/aws/ecs.tf",
      "content": "resource \"aws_ecs_cluster\" \"resumate_cluster\" {\n  name = \"resumate-ai-cluster\"\n\n  setting {\n    name  = \"containerInsights\"\n    value = \"enabled\"\n  }\n\n  tags = {\n    Name = \"resumate-ai-cluster\"\n  }\n}\n\nresource \"aws_cloudwatch_log_group\" \"resumate_logs\" {\n  name              = \"/ecs/resumate-ai\"\n  retention_in_days = 7\n}\n\nresource \"aws_ecs_task_definition\" \"resumate_backend_task\" {\n  family                   = \"resumate-ai-backend-task\"\n  cpu                      = 256\n  memory                   = 512\n  network_mode             = \"awsvpc\"\n  requires_compatibilities = [\"FARGATE\"]\n  execution_role_arn       = aws_iam_role.ecs_task_execution_role.arn\n  task_role_arn            = aws_iam_role.ecs_task_role.arn\n\n  container_definitions = jsonencode([\n    {\n      \"name\": \"backend-container\",\n      \"image\": \"${aws_ecr_repository.resumate_backend_ecr.repository_url}:latest\",\n      \"cpu\": 256,\n      \"memory\": 512,\n      \"essential\": true,\n      \"portMappings\": [\n        {\n          \"containerPort\": 3001,\n          \"hostPort\": 3001,\n          \"protocol\": \"tcp\"\n        }\n      ],\n      \"environment\": [\n        { \"name\": \"DATABASE_URL\", \"value\": \"${aws_rds_cluster_instance.resumate_db_instance.endpoint}\" },\n        { \"name\": \"JWT_SECRET\", \"value\": \"${var.jwt_secret}\" },\n        { \"name\": \"AWS_ACCESS_KEY_ID\", \"value\": \"${var.aws_access_key_id}\" },\n        { \"name\": \"AWS_SECRET_ACCESS_KEY\", \"value\": \"${var.aws_secret_access_key}\" },\n        { \"name\": \"AWS_REGION\", \"value\": \"${var.aws_region}\" },\n        { \"name\": \"AWS_S3_BUCKET_NAME\", \"value\": \"${aws_s3_bucket.resumate_pdfs.bucket}\" },\n        { \"name\": \"NEXT_PUBLIC_APP_URL\", \"value\": \"${aws_cloudfront_distribution.resumate_frontend_cdn.domain_name}\" } # Assuming frontend is on CloudFront\n      ],\n      \"logConfiguration\": {\n        \"logDriver\": \"awslogs\",\n        \"options\": {\n          \"awslogs-group\": \"${aws_cloudwatch_log_group.resumate_logs.name}\",\n          \"awslogs-region\": \"${var.aws_region}\",\n          \"awslogs-stream-prefix\": \"backend\"\n        }\n      }\n    }\n  ])\n\n  tags = {\n    Name = \"resumate-ai-backend-task\"\n  }\n}\n\nresource \"aws_ecs_service\" \"resumate_backend_service\" {\n  name            = \"resumate-ai-backend-service\"\n  cluster         = aws_ecs_cluster.resumate_cluster.id\n  task_definition = aws_ecs_task_definition.resumate_backend_task.arn\n  desired_count   = 1\n  launch_type     = \"FARGATE\"\n\n  network_configuration {\n    subnets          = [aws_subnet.resumate_private_subnet_a.id]\n    security_groups  = [aws_security_group.resumate_backend_sg.id]\n    assign_public_ip = false\n  }\n\n  load_balancer {\n    target_group_arn = aws_lb_target_group.resumate_backend_tg.arn\n    container_name   = \"backend-container\"\n    container_port   = 3001\n  }\n\n  depends_on = [aws_lb_listener.resumate_http_listener] # Ensure ALB is ready\n\n  tags = {\n    Name = \"resumate-ai-backend-service\"\n  }\n}\n\nresource \"aws_ecr_repository\" \"resumate_backend_ecr\" {\n  name                 = \"resumate-ai-backend\"\n  image_tag_mutability = \"MUTABLE\"\n\n  image_scanning_configuration {\n    scan_on_push = true\n  }\n}\n\nresource \"aws_ecr_repository\" \"resumate_frontend_ecr\" {\n  name                 = \"resumate-ai-frontend\"\n  image_tag_mutability = \"MUTABLE\"\n\n  image_scanning_configuration {\n    scan_on_push = true\n  }\n}\n\n# Frontend ECS service (similar to backend, but might be public facing)\nresource \"aws_ecs_task_definition\" \"resumate_frontend_task\" {\n  family                   = \"resumate-ai-frontend-task\"\n  cpu                      = 256\n  memory                   = 512\n  network_mode             = \"awsvpc\"\n  requires_compatibilities = [\"FARGATE\"]\n  execution_role_arn       = aws_iam_role.ecs_task_execution_role.arn\n  task_role_arn            = aws_iam_role.ecs_task_role.arn\n\n  container_definitions = jsonencode([\n    {\n      \"name\": \"frontend-container\",\n      \"image\": \"${aws_ecr_repository.resumate_frontend_ecr.repository_url}:latest\",\n      \"cpu\": 256,\n      \"memory\": 512,\n      \"essential\": true,\n      \"portMappings\": [\n        {\n          \"containerPort\": 3000,\n          \"hostPort\": 3000,\n          \"protocol\": \"tcp\"\n        }\n      ],\n      \"environment\": [\n        { \"name\": \"NEXT_PUBLIC_API_URL\", \"value\": \"${aws_lb.resumate_api_lb.dns_name}\" } # Backend API URL\n      ],\n      \"logConfiguration\": {\n        \"logDriver\": \"awslogs\",\n        \"options\": {\n          \"awslogs-group\": \"${aws_cloudwatch_log_group.resumate_logs.name}\",\n          \"awslogs-region\": \"${var.aws_region}\",\n          \"awslogs-stream-prefix\": \"frontend\"\n        }\n      }\n    }\n  ])\n\n  tags = {\n    Name = \"resumate-ai-frontend-task\"\n  }\n}\n\nresource \"aws_ecs_service\" \"resumate_frontend_service\" {\n  name            = \"resumate-ai-frontend-service\"\n  cluster         = aws_ecs_cluster.resumate_cluster.id\n  task_definition = aws_ecs_task_definition.resumate_frontend_task.arn\n  desired_count   = 1\n  launch_type     = \"FARGATE\"\n\n  network_configuration {\n    subnets          = [aws_subnet.resumate_public_subnet_a.id]\n    security_groups  = [aws_security_group.resumate_frontend_sg.id]\n    assign_public_ip = true\n  }\n\n  # For a Next.js server, you'd typically expose it via an ALB for public access\n  load_balancer {\n    target_group_arn = aws_lb_target_group.resumate_frontend_tg.arn\n    container_name   = \"frontend-container\"\n    container_port   = 3000\n  }\n\n  depends_on = [aws_lb_listener.resumate_http_listener] # Ensure ALB is ready\n\n  tags = {\n    Name = \"resumate-ai-frontend-service\"\n  }\n}\n\n# Application Load Balancer for Backend API\nresource \"aws_lb\" \"resumate_api_lb\" {\n  name               = \"resumate-ai-api-lb\"\n  internal           = false\n  load_balancer_type = \"application\"\n  security_groups    = [aws_security_group.resumate_api_lb_sg.id]\n  subnets            = [aws_subnet.resumate_public_subnet_a.id]\n\n  tags = {\n    Name = \"resumate-ai-api-lb\"\n  }\n}\n\nresource \"aws_lb_target_group\" \"resumate_backend_tg\" {\n  name     = \"resumate-ai-backend-tg\"\n  port     = 3001\n  protocol = \"HTTP\"\n  vpc_id   = aws_vpc.resumate_vpc.id\n  target_type = \"ip\"\n\n  health_check {\n    path                = \"/api/health\" # Assuming a health check endpoint\n    protocol            = \"HTTP\"\n    matcher             = \"200\"\n    interval            = 30\n    timeout             = 5\n    healthy_threshold   = 2\n    unhealthy_threshold = 2\n  }\n}\n\nresource \"aws_lb_target_group\" \"resumate_frontend_tg\" {\n  name     = \"resumate-ai-frontend-tg\"\n  port     = 3000\n  protocol = \"HTTP\"\n  vpc_id   = aws_vpc.resumate_vpc.id\n  target_type = \"ip\"\n\n  health_check {\n    path                = \"/api/health\" # Assuming a health check endpoint on frontend\n    protocol            = \"HTTP\"\n    matcher             = \"200\"\n    interval            = 30\n    timeout             = 5\n    healthy_threshold   = 2\n    unhealthy_threshold = 2\n  }\n}\n\nresource \"aws_lb_listener\" \"resumate_http_listener\" {\n  load_balancer_arn = aws_lb.resumate_api_lb.arn\n  port              = \"80\"\n  protocol          = \"HTTP\"\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = aws_lb_target_group.resumate_backend_tg.arn\n  }\n}\n\n# Security Group for Backend ECS tasks\nresource \"aws_security_group\" \"resumate_backend_sg\" {\n  name        = \"resumate-ai-backend-sg\"\n  description = \"Allow traffic to backend ECS tasks\"\n  vpc_id      = aws_vpc.resumate_vpc.id\n\n  ingress {\n    from_port       = 3001\n    to_port         = 3001\n    protocol        = \"tcp\"\n    security_groups = [aws_security_group.resumate_api_lb_sg.id] # Only allow from ALB\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n\n# Security Group for Frontend ECS tasks\nresource \"aws_security_group\" \"resumate_frontend_sg\" {\n  name        = \"resumate-ai-frontend-sg\"\n  description = \"Allow traffic to frontend ECS tasks\"\n  vpc_id      = aws_vpc.resumate_vpc.id\n\n  ingress {\n    from_port       = 3000\n    to_port         = 3000\n    protocol        = \"tcp\"\n    security_groups = [aws_security_group.resumate_api_lb.id] # Only allow from ALB or CloudFront origin\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n\n# Security Group for ALB (to allow public access)\nresource \"aws_security_group\" \"resumate_api_lb_sg\" {\n  name        = \"resumate-ai-api-lb-sg\"\n  description = \"Allow HTTP/HTTPS traffic to ALB\"\n  vpc_id      = aws_vpc.resumate_vpc.id\n\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  ingress {\n    from_port   = 443\n    to_port     = 443\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n"
    },
    {
      "path": "infra/aws/rds.tf",
      "content": "resource \"aws_db_instance\" \"resumate_db_instance\" {\n  allocated_storage    = 20\n  engine               = \"postgres\"\n  engine_version       = \"15.2\"\n  instance_class       = \"db.t3.micro\"\n  db_name              = \"resumate_db\"\n  username             = \"user\"\n  password             = var.db_password\n  parameter_group_name = \"default.postgres15\"\n  skip_final_snapshot  = true\n  publicly_accessible  = false # Best practice to keep private\n  vpc_security_group_ids = [aws_security_group.resumate_rds_sg.id]\n  db_subnet_group_name = aws_db_subnet_group.resumate_db_subnet_group.name\n\n  tags = {\n    Name = \"resumate-ai-rds\"\n  }\n}\n\nresource \"aws_db_subnet_group\" \"resumate_db_subnet_group\" {\n  name       = \"resumate-ai-db-subnet-group\"\n  subnet_ids = [aws_subnet.resumate_private_subnet_a.id] # Use private subnets\n\n  tags = {\n    Name = \"resumate-ai-db-subnet-group\"\n  }\n}\n\nresource \"aws_security_group\" \"resumate_rds_sg\" {\n  name        = \"resumate-ai-rds-sg\"\n  description = \"Allow traffic to RDS from ECS tasks\"\n  vpc_id      = aws_vpc.resumate_vpc.id\n\n  ingress {\n    from_port       = 5432\n    to_port         = 5432\n    protocol        = \"tcp\"\n    security_groups = [aws_security_group.resumate_backend_sg.id] # Only allow from backend ECS SG\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n"
    },
    {
      "path": "infra/aws/s3.tf",
      "content": "resource \"aws_s3_bucket\" \"resumate_pdfs\" {\n  bucket = \"${var.s3_bucket_prefix}-resumate-pdfs\"\n  acl    = \"private\" # Keep PDFs private, access via signed URLs or backend\n\n  versioning {\n    enabled = true\n  }\n\n  tags = {\n    Name = \"resumate-ai-pdfs\"\n  }\n}\n\nresource \"aws_s3_bucket_public_access_block\" \"resumate_pdfs_block_public_access\" {\n  bucket                  = aws_s3_bucket.resumate_pdfs.id\n  block_public_acls       = true\n  block_public_policy     = true\n  ignore_public_acls      = true\n  restrict_public_buckets = true\n}\n\nresource \"aws_s3_bucket\" \"resumate_assets\" {\n  bucket = \"${var.s3_bucket_prefix}-resumate-assets\"\n  acl    = \"public-read\" # For public assets like template images\n\n  tags = {\n    Name = \"resumate-ai-assets\"\n  }\n}\n\nresource \"aws_s3_bucket_public_access_block\" \"resumate_assets_block_public_access\" {\n  bucket                  = aws_s3_bucket.resumate_assets.id\n  block_public_acls       = false\n  block_public_policy     = false\n  ignore_public_acls      = false\n  restrict_public_buckets = false\n}\n\nresource \"aws_s3_bucket_policy\" \"resumate_assets_policy\" {\n  bucket = aws_s3_bucket.resumate_assets.id\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect    = \"Allow\"\n        Principal = \"*\"\n        Action    = [\n          \"s3:GetObject\"\n        ]\n        Resource  = [\n          \"${aws_s3_bucket.resumate_assets.arn}/*\"\n        ]\n      }\n    ]\n  })\n}\n"
    },
    {
      "path": "infra/aws/cognito.tf",
      "content": "resource \"aws_cognito_user_pool\" \"resumate_user_pool\" {\n  name = \"resumate-ai-user-pool\"\n\n  auto_verified_attributes = [\"email\"]\n\n  password_policy {\n    minimum_length    = 8\n    require_lowercase = true\n    require_numbers   = true\n    require_symbols   = false\n    require_uppercase = true\n  }\n\n  schemas {\n    name     = \"email\"\n    required = true\n    mutable  = true\n    attribute_data_type = \"String\"\n  }\n  schemas {\n    name     = \"name\"\n    required = false\n    mutable  = true\n    attribute_data_type = \"String\"\n  }\n\n  tags = {\n    Name = \"resumate-ai-user-pool\"\n  }\n}\n\nresource \"aws_cognito_user_pool_client\" \"resumate_app_client\" {\n  name                                 = \"resumate-ai-app-client\"\n  user_pool_id                         = aws_cognito_user_pool.resumate_user_pool.id\n  generate_secret                      = false # For web/mobile clients\n  explicit_auth_flows                  = [\"ADMIN_NO_SRP_AUTH\", \"USER_PASSWORD_AUTH\"]\n  read_attributes                      = [\"email\", \"name\"]\n  write_attributes                     = [\"email\", \"name\"]\n  supported_identity_providers         = [\"COGNITO\"]\n  callback_urls                        = [\"http://localhost:3000/api/auth/callback\", \"${var.frontend_url}/api/auth/callback\"]\n  logout_urls                          = [\"http://localhost:3000/logout\", \"${var.frontend_url}/logout\"]\n}\n\nresource \"aws_cognito_identity_pool\" \"resumate_identity_pool\" {\n  identity_pool_name               = \"resumate-ai-identity-pool\"\n  allow_unauthenticated_identities = false\n\n  cognito_identity_providers {\n    client_id  = aws_cognito_user_pool_client.resumate_app_client.id\n    provider_name = aws_cognito_user_pool.resumate_user_pool.provider_name\n  }\n}\n\nresource \"aws_iam_role\" \"cognito_authenticated_role\" {\n  name = \"resumate-ai-cognito-authenticated-role\"\n\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect = \"Allow\"\n        Principal = {\n          Federated = \"cognito-identity.amazonaws.com\"\n        }\n        Action = \"sts:AssumeRoleWithWebIdentity\"\n        Condition = {\n          StringEquals = {\n            \"cognito-identity.amazonaws.com:aud\" = aws_cognito_identity_pool.resumate_identity_pool.id\n          }\n          \"ForAnyValue:StringLike\" = {\n            \"cognito-identity.amazonaws.com:amr\" = \"authenticated\"\n          }\n        }\n      }\n    ]\n  })\n}\n\nresource \"aws_iam_policy\" \"cognito_auth_policy\" {\n  name        = \"resumate-ai-cognito-auth-policy\"\n  description = \"Policy for authenticated Cognito users\"\n\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect = \"Allow\"\n        Action = [\n          \"s3:GetObject\",\n          \"s3:PutObject\"\n        ]\n        Resource = [\n          \"${aws_s3_bucket.resumate_pdfs.arn}/users/${cognito_identity_pool_sub()}/resumes/*\", # Allow user to manage their own PDFs\n          \"${aws_s3_bucket.resumate_assets.arn}/*\" # Allow read-only for public assets\n        ]\n      }\n      # Add other permissions required for authenticated users\n    ]\n  })\n}\n\nresource \"aws_iam_role_policy_attachment\" \"cognito_auth_policy_attach\" {\n  role       = aws_iam_role.cognito_authenticated_role.name\n  policy_arn = aws_iam_policy.cognito_auth_policy.arn\n}\n\n# Associate authenticated role with identity pool\nresource \"aws_cognito_identity_pool_roles_attachment\" \"resumate_identity_pool_roles\" {\n  identity_pool_id = aws_cognito_identity_pool.resumate_identity_pool.id\n\n  roles = {\n    \"authenticated\" = aws_iam_role.cognito_authenticated_role.arn\n  }\n}\n"
    },
    {
      "path": "infra/aws/cloudfront.tf",
      "content": "resource \"aws_cloudfront_distribution\" \"resumate_frontend_cdn\" {\n  origin {\n    domain_name = aws_lb.resumate_api_lb.dns_name # Point to ALB for Next.js SSR/API routes\n    origin_id   = \"frontend-alb-origin\"\n\n    custom_header {\n      name  = \"X-Origin-Type\"\n      value = \"frontend\"\n    }\n\n    custom_origin_config {\n      http_port              = 80\n      https_port             = 443\n      origin_protocol_policy = \"http-only\" # Or \"https-only\" if ALB has SSL enabled\n      origin_read_timeout    = 30\n      origin_ssl_protocols   = [\"TLSv1.2\"]\n    }\n  }\n\n  enabled             = true\n  is_ipv6_enabled     = true\n  comment             = \"CloudFront distribution for Resumate AI frontend\"\n  default_root_object = \"index.html\" # Or adjust for Next.js, e.g., root page\n\n  default_cache_behavior {\n    allowed_methods  = [\"GET\", \"HEAD\", \"OPTIONS\", \"PUT\", \"POST\", \"PATCH\", \"DELETE\"]\n    cached_methods   = [\"GET\", \"HEAD\"]\n    target_origin_id = \"frontend-alb-origin\"\n\n    forwarded_values {\n      query_string = true\n\n      cookies {\n        forward = \"all\"\n      }\n\n      headers = [\"Authorization\", \"Host\"]\n    }\n\n    viewer_protocol_policy = \"redirect-to-https\"\n    min_ttl                = 0\n    default_ttl            = 86400 # 24 hours\n    max_ttl                = 31536000 # 1 year\n    compress               = true\n  }\n\n  restrictions {\n    geo_restriction {\n      restriction_type = \"none\"\n    }\n  }\n\n  viewer_certificate {\n    cloudfront_default_certificate = true # Use CloudFront's default SSL certificate\n    # Or use acm_certificate_arn if you have a custom domain\n    # acm_certificate_arn      = \"arn:aws:acm:us-east-1:123456789012:certificate/xyz-123\"\n    # ssl_support_method       = \"sni-only\"\n    # minimum_protocol_version = \"TLSv1.2_2021\"\n  }\n\n  tags = {\n    Name = \"resumate-ai-frontend-cdn\"\n  }\n}\n"
    },
    {
      "path": "infra/aws/iam.tf",
      "content": "resource \"aws_iam_role\" \"ecs_task_execution_role\" {\n  name = \"resumate-ai-ecs-task-execution-role\"\n\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Action = \"sts:AssumeRole\"\n        Effect = \"Allow\"\n        Principal = {\n          Service = \"ecs-tasks.amazonaws.com\"\n        }\n      }\n    ]\n  })\n\n  tags = {\n    Name = \"resumate-ai-ecs-task-execution-role\"\n  }\n}\n\nresource \"aws_iam_role_policy_attachment\" \"ecs_task_execution_role_policy\" {\n  role       = aws_iam_role.ecs_task_execution_role.name\n  policy_arn = \"arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\"\n}\n\nresource \"aws_iam_role\" \"ecs_task_role\" {\n  name = \"resumate-ai-ecs-task-role\"\n\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Action = \"sts:AssumeRole\"\n        Effect = \"Allow\"\n        Principal = {\n          Service = \"ecs-tasks.amazonaws.com\"\n        }\n      }\n    ]\n  })\n\n  tags = {\n    Name = \"resumate-ai-ecs-task-role\"\n  }\n}\n\nresource \"aws_iam_policy\" \"ecs_app_policy\" {\n  name        = \"resumate-ai-ecs-app-policy\"\n  description = \"Policy for ECS tasks to access S3 and other AWS services\"\n\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect   = \"Allow\"\n        Action   = [\n          \"s3:GetObject\",\n          \"s3:PutObject\",\n          \"s3:DeleteObject\",\n          \"s3:ListBucket\"\n        ]\n        Resource = [\n          \"${aws_s3_bucket.resumate_pdfs.arn}\",\n          \"${aws_s3_bucket.resumate_pdfs.arn}/*\",\n          \"${aws_s3_bucket.resumate_assets.arn}\",\n          \"${aws_s3_bucket.resumate_assets.arn}/*\"\n        ]\n      },\n      {\n        Effect = \"Allow\",\n        Action = [\n          \"secretsmanager:GetSecretValue\",\n          \"ssm:GetParameters\",\n          \"ssm:GetParameter\",\n          \"ssm:GetParametersByPath\"\n        ],\n        Resource = \"*\" # Limit to specific secrets/parameters in production\n      }\n    ]\n  })\n}\n\nresource \"aws_iam_role_policy_attachment\" \"ecs_task_app_policy_attach\" {\n  role       = aws_iam_role.ecs_task_role.name\n  policy_arn = aws_iam_policy.ecs_app_policy.arn\n}\n\nresource \"aws_iam_role_policy_attachment\" \"ecs_task_s3_read_only_attach\" {\n  role       = aws_iam_role.ecs_task_role.name\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess\" # Example for broader S3 read\n}\n"
    },
    {
      "path": "infra/aws/variables.tf",
      "content": "variable \"aws_region\" {\n  description = \"The AWS region to deploy resources.\"\n  type        = string\n  default     = \"us-east-1\"\n}\n\nvariable \"db_password\" {\n  description = \"Password for the RDS PostgreSQL database.\"\n  type        = string\n  sensitive   = true\n}\n\nvariable \"jwt_secret\" {\n  description = \"Secret key for JWT authentication.\"\n  type        = string\n  sensitive   = true\n}\n\nvariable \"aws_access_key_id\" {\n  description = \"AWS Access Key ID for S3 operations.\"\n  type        = string\n  sensitive   = true\n}\n\nvariable \"aws_secret_access_key\" {\n  description = \"AWS Secret Access Key for S3 operations.\"\n  type        = string\n  sensitive   = true\n}\n\nvariable \"s3_bucket_prefix\" {\n  description = \"Prefix for S3 bucket names to ensure uniqueness.\"\n  type        = string\n  default     = \"resumate-ai\"\n}\n\nvariable \"frontend_url\" {\n  description = \"The public URL of the deployed frontend (for Cognito callbacks).\"\n  type        = string\n  default     = \"http://localhost:3000\"\n}\n\n# Add any other variables needed for your infrastructure\n"
    },
    {
      "path": "infra/aws/outputs.tf",
      "content": "output \"api_load_balancer_dns_name\" {\n  description = \"The DNS name of the API Load Balancer.\"\n  value       = aws_lb.resumate_api_lb.dns_name\n}\n\noutput \"cloudfront_domain_name\" {\n  description = \"The domain name of the CloudFront distribution.\"\n  value       = aws_cloudfront_distribution.resumate_frontend_cdn.domain_name\n}\n\noutput \"backend_ecr_repository_url\" {\n  description = \"The URL of the backend ECR repository.\"\n  value       = aws_ecr_repository.resumate_backend_ecr.repository_url\n}\n\noutput \"frontend_ecr_repository_url\" {\n  description = \"The URL of the frontend ECR repository.\"\n  value       = aws_ecr_repository.resumate_frontend_ecr.repository_url\n}\n\noutput \"s3_pdfs_bucket_name\" {\n  description = \"The name of the S3 bucket for PDF storage.\"\n  value       = aws_s3_bucket.resumate_pdfs.bucket\n}\n\noutput \"s3_assets_bucket_name\" {\n  description = \"The name of the S3 bucket for static assets.\"\n  value       = aws_s3_bucket.resumate_assets.bucket\n}\n\noutput \"cognito_user_pool_id\" {\n  description = \"The ID of the Cognito User Pool.\"\n  value       = aws_cognito_user_pool.resumate_user_pool.id\n}\n\noutput \"cognito_user_pool_client_id\" {\n  description = \"The ID of the Cognito User Pool Client.\"\n  value       = aws_cognito_user_pool_client.resumate_app_client.id\n}\n"
    },
    {
      "path": "docs/ARCHITECTURE.md",
      "content": "# Resumate AI - High-Level Architecture\n\n## Overview\n\nResumate AI is built as a modern, decoupled web application following a microservices-like approach within a monorepo structure. It comprises a Next.js frontend, a NestJS backend API, a PostgreSQL database, and leverages various AWS services for scalability, reliability, and security.\n\n## Key Components\n\n1.  **Frontend (Next.js)**:\n    *   **Purpose**: User interface for creating, editing, and viewing resumes. Handles user authentication flows, template browsing, and resume data input.\n    *   **Technologies**: React, Next.js (App Router), TypeScript, Tailwind CSS, TanStack Query, React Hook Form.\n    *   **Deployment**: Containerized (Docker) and deployed to AWS ECS Fargate, exposed via an Application Load Balancer and AWS CloudFront for low-latency content delivery.\n\n2.  **Backend API (NestJS)**:\n    *   **Purpose**: Core business logic, user management, template management, resume data persistence, and PDF generation.\n    *   **Technologies**: Node.js, NestJS, TypeScript, Prisma (ORM), PostgreSQL, JWT authentication, Puppeteer (for PDF generation).\n    *   **Deployment**: Containerized (Docker) and deployed to AWS ECS Fargate, exposed via an Application Load Balancer.\n\n3.  **Database (PostgreSQL)**:\n    *   **Purpose**: Stores all structured data: user accounts, resume details (metadata and JSON data blobs), and template definitions.\n    *   **Deployment**: AWS RDS for PostgreSQL for managed, scalable, and highly available database service.\n\n4.  **Object Storage (AWS S3)**:\n    *   **Purpose**: Stores generated PDF resumes and static template assets (images).\n    *   **Deployment**: AWS S3 Buckets, integrated with backend for upload/download and CloudFront for asset delivery.\n\n5.  **Authentication (AWS Cognito)**:\n    *   **Purpose**: Manages user registration, login, and identity. Provides user pools for directory services and identity pools for AWS resource authorization.\n    *   **Integration**: Backend uses JWTs issued by Cognito for API authentication. Frontend interacts directly with Cognito or via backend proxy.\n\n6.  **Infrastructure as Code (Terraform)**:\n    *   **Purpose**: Defines and provisions all AWS cloud resources programmatically, ensuring consistency, repeatability, and version control of infrastructure.\n\n7.  **CI/CD (GitHub Actions)**:\n    *   **Purpose**: Automates the build, test, and deployment process for both frontend and backend services upon code changes.\n\n## Data Flow (Example: Resume Creation)\n\n1.  **User Interaction**: User logs into the **Frontend** (Next.js app).\n2.  **Authentication**: Frontend sends login credentials to **Backend API** (`/auth/login`). Backend authenticates against **Cognito/Database**, issues a JWT.\n3.  **Data Input**: User selects a template and inputs resume data on the **Frontend**. \n4.  **Save Resume**: Frontend sends resume data (including selected `templateId` and the `data` JSON blob) to **Backend API** (`/resumes`).\n5.  **Data Persistence**: Backend uses **Prisma** to save the resume record to the **PostgreSQL (RDS)** database.\n6.  **PDF Generation Request**: User triggers PDF generation from Frontend. Frontend calls **Backend API** (`/resumes/:id/generate-pdf`).\n7.  **PDF Generation**: Backend fetches resume data and template content from **PostgreSQL**. It then uses **Puppeteer** to render the HTML content (populated with resume data) into a PDF.\n8.  **PDF Storage**: The generated PDF `Buffer` is uploaded by the **Backend** to **AWS S3**.\n9.  **URL Update**: The S3 PDF URL is saved back into the **PostgreSQL** database for the resume record.\n10. **PDF Access**: Frontend retrieves the PDF URL and allows the user to download or view the PDF, potentially served via **CloudFront** if configured for secure S3 access.\n\n## Scalability and Reliability Considerations\n\n*   **Containerization (ECS Fargate)**: Abstracts away server management, providing auto-scaling capabilities.\n*   **Managed Database (RDS)**: Handles database backups, patching, and scaling.\n*   **S3 for Assets**: Highly scalable and durable object storage.\n*   **CloudFront**: Reduces latency and offloads traffic from origins.\n*   **Load Balancers (ALB)**: Distributes incoming traffic across multiple ECS tasks for high availability and fault tolerance.\n*   **Stateless Backend**: Allows horizontal scaling of API instances.\n\nThis architecture provides a solid foundation for the MVP, with clear paths for future expansion and feature development."
    },
    {
      "path": "docs/API.md",
      "content": "# Resumate AI - Backend API Documentation\n\nThis document outlines the RESTful API endpoints for the Resumate AI backend.\n\nThe API is built with NestJS and follows standard REST conventions.\n\n**Base URL:** `https://api.resumate-ai.com/api` (Production) or `http://localhost:3001/api` (Local Development)\n\n## Authentication\n\nAll protected endpoints require a Bearer Token (JWT) in the `Authorization` header.\n\n### `POST /auth/register`\n*   **Description**: Registers a new user account.\n*   **Request Body**: `RegisterDto`\n    ```json\n    {\n        \"name\": \"John Doe\",\n        \"email\": \"john.doe@example.com\",\n        \"password\": \"securepassword123\"\n    }\n    ```\n*   **Response**: `UserProfile` (without password)\n    ```json\n    {\n        \"id\": \"uuid-string\",\n        \"email\": \"john.doe@example.com\",\n        \"name\": \"John Doe\",\n        \"createdAt\": \"2023-01-01T12:00:00Z\",\n        \"updatedAt\": \"2023-01-01T12:00:00Z\"\n    }\n    ```\n\n### `POST /auth/login`\n*   **Description**: Logs in a user and returns a JWT access token.\n*   **Request Body**: `LoginDto`\n    ```json\n    {\n        \"email\": \"john.doe@example.com\",\n        \"password\": \"securepassword123\"\n    }\n    ```\n*   **Response**: `LoginResponse`\n    ```json\n    {\n        \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n    }\n    ```\n\n### `GET /auth/profile`\n*   **Description**: Retrieves the authenticated user's profile.\n*   **Authentication**: Required\n*   **Response**: `UserProfile`\n\n## Users\n\n### `GET /users/me`\n*   **Description**: Get the profile of the current authenticated user.\n*   **Authentication**: Required\n*   **Response**: `UserProfile`\n\n## Templates\n\n### `GET /templates`\n*   **Description**: Retrieves a list of all available resume templates.\n*   **Authentication**: Optional (public access for browsing)\n*   **Response**: `Template[]`\n    ```json\n    [\n        {\n            \"id\": \"uuid-template-1\",\n            \"name\": \"Modern Professional\",\n            \"imageUrl\": \"https://example.com/template1.png\",\n            \"content\": \"<html><body>...template HTML...</body></html>\",\n            \"createdAt\": \"2023-01-01T12:00:00Z\",\n            \"updatedAt\": \"2023-01-01T12:00:00Z\"\n        }\n    ]\n    ```\n\n### `GET /templates/:id`\n*   **Description**: Retrieves a specific template by ID.\n*   **Authentication**: Optional\n*   **Response**: `Template`\n\n## Resumes\n\n### `POST /resumes`\n*   **Description**: Creates a new resume for the authenticated user.\n*   **Authentication**: Required\n*   **Request Body**: `CreateResumeDto`\n    ```json\n    {\n        \"templateId\": \"uuid-template-1\",\n        \"data\": {\n            \"name\": \"Jane Doe\",\n            \"email\": \"jane.doe@example.com\",\n            \"summary\": \"Experienced professional...\",\n            \"experience\": [],\n            \"education\": []\n        }\n    }\n    ```\n*   **Response**: `Resume`\n\n### `GET /resumes`\n*   **Description**: Retrieves all resumes belonging to the authenticated user.\n*   **Authentication**: Required\n*   **Response**: `Resume[]`\n\n### `GET /resumes/:id`\n*   **Description**: Retrieves a specific resume by ID for the authenticated user.\n*   **Authentication**: Required\n*   **Response**: `Resume`\n\n### `PATCH /resumes/:id`\n*   **Description**: Updates a specific resume for the authenticated user.\n*   **Authentication**: Required\n*   **Request Body**: `UpdateResumeDto` (Partial `CreateResumeDto`)\n*   **Response**: `Resume`\n\n### `DELETE /resumes/:id`\n*   **Description**: Deletes a specific resume for the authenticated user.\n*   **Authentication**: Required\n*   **Response**: `204 No Content`\n\n### `POST /resumes/:id/generate-pdf`\n*   **Description**: Generates a PDF for the specified resume and uploads it to S3.\n*   **Authentication**: Required\n*   **Response**: `{\"pdfUrl\": \"https://s3.amazonaws.com/your-bucket/path/to/resume.pdf\"}`\n\n## Files (Internal/Protected)\n\nThese endpoints are primarily for the backend's internal use or specific frontend upload features.\n\n### `POST /files/upload/avatar`\n*   **Description**: Uploads a user avatar image.\n*   **Authentication**: Required\n*   **Request Body**: `multipart/form-data` with a file field named `file`.\n*   **Response**: `{\"url\": \"https://s3.amazonaws.com/your-bucket/path/to/avatar.jpg\"}`\n\n### `GET /files/download/:key`\n*   **Description**: Streams a file from S3 given its key.\n*   **Authentication**: Required (or implement signed URLs for private files)\n*   **Response**: File content (e.g., `application/pdf`, `image/jpeg`)\n"
    },
    {
      "path": "docs/DATABASE_SCHEMA.md",
      "content": "# Resumate AI - Database Schema\n\nThis document describes the database schema for the Resumate AI platform, powered by PostgreSQL and managed with Prisma ORM. The schema is defined in `packages/db/schema.prisma`.\n\n## Entity Relationship Diagram (Conceptual)\n\n```mermaid\nerDiagram\n    User ||--o{ Resume : creates\n    Template ||--o{ Resume : uses\n\n    User {\n        string id PK\n        string email UK\n        string password\n        string name optional\n        datetime createdAt\n        datetime updatedAt\n    }\n\n    Template {\n        string id PK\n        string name UK\n        string imageUrl optional\n        string content // HTML or JSON structure\n        datetime createdAt\n        datetime updatedAt\n    }\n\n    Resume {\n        string id PK\n        string userId FK \"User\"\n        string templateId FK \"Template\"\n        json data // JSON blob of actual resume content (experience, education, skills)\n        string pdfUrl optional // URL to generated PDF in S3\n        datetime createdAt\n        datetime updatedAt\n    }\n```\n\n## Table Details\n\n### `User` Table\n\nStores user authentication and profile information.\n\n| Column      | Type        | Constraints      | Description                          |\n| :---------- | :---------- | :--------------- | :----------------------------------- |\n| `id`        | `String`    | Primary Key, UUID | Unique identifier for the user.      |\n| `email`     | `String`    | Unique           | User's email address (login credential). |\n| `password`  | `String`    |                  | Hashed password for authentication.  |\n| `name`      | `String`    | Optional         | User's full name.                    |\n| `createdAt` | `DateTime`  | Default `now()`  | Timestamp of record creation.        |\n| `updatedAt` | `DateTime`  | `@updatedAt`     | Timestamp of last record update.     |\n\n### `Template` Table\n\nStores predefined resume templates that users can choose from.\n\n| Column      | Type        | Constraints      | Description                                  |\n| :---------- | :---------- | :--------------- | :------------------------------------------- |\n| `id`        | `String`    | Primary Key, UUID | Unique identifier for the template.          |\n| `name`      | `String`    | Unique           | Display name of the template.                |\n| `imageUrl`  | `String`    | Optional         | URL to a thumbnail image of the template.    |\n| `content`   | `String`    |                  | The actual structure/content of the template (e.g., HTML string or JSON configuration for dynamic rendering). |\n| `createdAt` | `DateTime`  | Default `now()`  | Timestamp of record creation.                |\n| `updatedAt` | `DateTime`  | `@updatedAt`     | Timestamp of last record update.             |\n\n### `Resume` Table\n\nStores individual resumes created by users, linking to a template and holding the user's specific data.\n\n| Column      | Type        | Constraints      | Description                                  |\n| :---------- | :---------- | :--------------- | :------------------------------------------- |\n| `id`        | `String`    | Primary Key, UUID | Unique identifier for the resume.            |\n| `userId`    | `String`    | Foreign Key      | Links to the `User` who created the resume.  |\n| `templateId`| `String`    | Foreign Key      | Links to the `Template` used for this resume. |\n| `data`      | `Json`      |                  | A JSON object containing all the specific user-inputted resume details (e.g., name, contact, experience, education, skills, etc.). This allows flexible schema. |\n| `pdfUrl`    | `String`    | Optional         | URL to the generated PDF file stored in S3.  |\n| `createdAt` | `DateTime`  | Default `now()`  | Timestamp of record creation.                |\n| `updatedAt` | `DateTime`  | `@updatedAt`     | Timestamp of last record update.             |\n\n## Relationships\n\n*   **User to Resume (One-to-Many)**: A `User` can create multiple `Resume`s. (`userId` in `Resume` table references `id` in `User` table).\n*   **Template to Resume (One-to-Many)**: A `Template` can be used for multiple `Resume`s. (`templateId` in `Resume` table references `id` in `Template` table).\n"
    },
    {
      "path": "scripts/setup-local-dev.sh",
      "content": "#!/bin/bash\n\nset -e # Exit immediately if a command exits with a non-zero status.\n\necho \"🚀 Starting Resumate AI Local Development Setup...\"\n\n# 1. Check for Prerequisites\necho \"Checking for prerequisites: Node.js, Yarn, Docker, Git...\"\ncommand -v node >/dev/null 2>&1 || { echo >&2 \"Node.js is not installed. Aborting.\"; exit 1; }\ncommand -v yarn >/dev/null 2>&1 || { echo >&2 \"Yarn is not installed. Aborting.\"; exit 1; }\ncommand -v docker >/dev/null 2>&1 || { echo >&2 \"Docker is not installed. Aborting.\"; exit 1; }\ncommand -v docker-compose >/dev/null 2>&1 || { echo >&2 \"Docker Compose is not installed. Aborting.\"; exit 1; }\n\n# 2. Copy .env.example to .env if it doesn't exist\nif [ ! -f .env ]; then\n  echo \"Copying .env.example to .env\"\n  cp .env.example .env\n  echo \"Please edit the .env file with your local configurations, then re-run this script if needed.\"\nelse\n  echo \".env file already exists. Skipping copy.\"\nfi\n\n# 3. Start Local Database and Services with Docker Compose\necho \"Spinning up Docker Compose services (PostgreSQL, MinIO)...\"\ndocker-compose up -d\n\necho \"Waiting for database to be ready...\"\n# Simple wait for Postgres. For production, use a more robust health check.\nuntil docker-compose exec db pg_isready -U user -d resumate_db; do\n  printf '.'\n  sleep 2\ndone\necho \"\\nDatabase is ready!\"\n\n# 4. Install Dependencies (Yarn Workspaces)\necho \"Installing monorepo dependencies using Yarn...\"\nyarn install\n\n# 5. Setup Database Schema and Generate Prisma Client\necho \"Applying Prisma migrations and generating Prisma client...\"\nyarn workspace @resumate-ai/db prisma migrate deploy # Use deploy in CI, dev for local development iterative changes\nyarn workspace @resumate-ai/db prisma generate\n\n# Optional: Seed initial data if a seed script exists\n# if [ -f apps/api/prisma/seed.ts ]; then\n#   echo \"Seeding initial database data...\"\n#   yarn workspace @resumate-ai/api prisma db seed\n# fi\n\necho \"✅ Local Development Setup Complete!\"\necho \"You can now run the backend and frontend:\"\necho \"  - Backend: cd apps/api && yarn start:dev OR yarn workspace @resumate-ai/api start:dev\"\necho \"  - Frontend: cd apps/web && yarn dev OR yarn workspace @resumate-ai/web dev\"\n"
    },
    {
      "path": ".env.example",
      "content": "# Database Configuration (for local Docker PostgreSQL)\nDATABASE_URL=\"postgresql://user:password@localhost:5432/resumate_db\"\n\n# AWS S3 Configuration (for local MinIO or actual S3)\nAWS_ACCESS_KEY_ID=\"your_aws_access_key_id\"\nAWS_SECRET_ACCESS_KEY=\"your_aws_secret_access_key\"\nAWS_REGION=\"your_aws_region\"\nAWS_S3_BUCKET_NAME=\"resumate-pdfs-bucket\"\nAWS_S3_ENDPOINT=\"http://localhost:9000\" # For MinIO local S3 emulation\n\n# JWT Secret (for backend authentication)\nJWT_SECRET=\"supersecretjwtkey\"\n\n# Frontend Configuration (for Next.js)\nNEXT_PUBLIC_API_URL=\"http://localhost:3001/api\" # Backend API URL\nNEXT_PUBLIC_APP_URL=\"http://localhost:3000\" # Frontend URL\n"
    },
    {
      "path": "docker-compose.yml",
      "content": "version: '3.8'\n\nservices:\n  db:\n    image: postgres:15-alpine\n    restart: always\n    environment:\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n      POSTGRES_DB: resumate_db\n    ports:\n      - '5432:5432'\n    volumes:\n      - db_data:/var/lib/postgresql/data\n\n  minio:\n    image: minio/minio\n    restart: always\n    ports:\n      - '9000:9000'\n      - '9001:9001' # MinIO Console port\n    environment:\n      MINIO_ROOT_USER: minioadmin\n      MINIO_ROOT_PASSWORD: minioadmin\n    command: server /data --console-address \":9001\"\n    volumes:\n      - minio_data:/data\n\nvolumes:\n  db_data:\n  minio_data:\n"
    },
    {
      "path": "package.json",
      "content": "{\n  \"name\": \"resumate-ai-monorepo\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"workspaces\": [\n    \"apps/*\",\n    \"packages/*\"\n  ],\n  \"scripts\": {\n    \"build\": \"yarn workspaces foreach --all --verbose run build\",\n    \"dev\": \"concurrently \\\"yarn workspace @resumate-ai/api start:dev\\\" \\\"yarn workspace @resumate-ai/web dev\\\"\",\n    \"lint\": \"eslint . --ext .ts,.tsx,.js,.jsx\",\n    \"format\": \"prettier --write \\\"**/*.{ts,tsx,js,jsx,json,md}\\\"\n  },\n  \"devDependencies\": {\n    \"concurrently\": \"^8.2.0\",\n    \"eslint\": \"^8.42.0\",\n    \"prettier\": \"^3.0.0\",\n    \"typescript\": \"^5.1.3\"\n  },\n  \"packageManager\": \"yarn@3.6.1\"\n}\n"
    },
    {
      "path": "README.md",
      "content": "# Resumate AI: Smart Resume Builder\n\n## Project Description\n\nResumate AI is an innovative, user-friendly resume creation platform designed to empower students and job seekers to effortlessly craft professional and impactful resumes. Leveraging a robust backend and a highly interactive frontend, the platform provides a rich selection of ready-to-use, customizable templates. Users can easily input their information, select a template, and generate high-quality PDF resumes, streamlining the job application process. This MVP focuses on core functionalities: user authentication, template browsing, resume data input, and PDF generation.\n\n## Technical Stack\n\nThe Resumate AI platform is built with a modern, scalable, and highly performant technical stack, ensuring a robust and maintainable application.\n\n**Frontend:**\n*   **Framework:** Next.js 14+ (React) - Utilizes the App Router for server-side rendering (SSR), static site generation (SSG), and enhanced performance, alongside a file-system based routing.\n*   **Language:** TypeScript - For strong typing, improved code quality, and better developer experience.\n*   **Styling:** Tailwind CSS - A utility-first CSS framework for rapidly building custom designs directly in HTML.\n*   **UI Components:** Shadcn/UI (optional, but recommended for reusable, accessible components).\n*   **Data Fetching:** TanStack Query (React Query) - For efficient data fetching, caching, and synchronization with the server.\n*   **Form Management:** React Hook Form with Zod - For performant and validated form handling.\n\n**Backend:**\n*   **Framework:** NestJS (Node.js) - A progressive Node.js framework for building efficient, reliable, and scalable server-side applications, leveraging TypeScript and inspired by Angular.\n*   **Language:** TypeScript.\n*   **ORM:** Prisma - A modern, type-safe ORM for database access, schema migrations, and database introspection.\n*   **Database:** PostgreSQL - A powerful, open-source relational database known for its reliability, feature robustness, and performance.\n*   **Authentication:** JWT-based authentication integrated with Passport.js strategies, potentially leveraging AWS Cognito User Pools for user management.\n*   **PDF Generation:** Puppeteer - A Node.js library that provides a high-level API to control headless Chrome or Chromium, enabling the conversion of dynamic HTML templates into high-quality PDF documents.\n\n**Cloud Infrastructure (AWS):**\n*   **Cloud Provider:** Amazon Web Services (AWS)\n*   **Compute:** AWS ECS Fargate - Serverless compute for containers, abstracting away infrastructure management.\n*   **Database Service:** AWS RDS for PostgreSQL - Managed relational database service.\n*   **Object Storage:** AWS S3 - Scalable storage for generated PDF resumes, user avatars, and template assets.\n*   **Content Delivery Network (CDN):** AWS CloudFront - Delivers frontend assets with low latency and high transfer speeds.\n*   **Identity & Access Management:** AWS Cognito - Managed user directory service for authentication (User Pools) and authorization (Identity Pools).\n*   **Infrastructure as Code (IaC):** Terraform - Defines and provisions the entire cloud infrastructure programmatically, ensuring consistency and repeatability.\n\n**Development & Operations:**\n*   **Version Control:** Git / GitHub\n*   **CI/CD:** GitHub Actions - For automated build, test, and deployment pipelines.\n*   **Containerization:** Docker - For consistent development and deployment environments.\n*   **Monorepo Management:** Yarn Workspaces - To manage multiple interdependent packages (frontend, backend, shared types, etc.) within a single repository.\n*   **Local Development Orchestration:** Docker Compose - For setting up and running local development services (database, local S3, etc.).\n\n## Detailed, Hierarchical Folder Structure\n\n```\nresumate-ai/\n├── .github/\n│   └── workflows/\n│       ├── backend-deploy.yml    # GitHub Actions workflow for backend deployment\n│       └── frontend-deploy.yml   # GitHub Actions workflow for frontend deployment\n├── apps/\n│   ├── api/                      # NestJS Backend Application\n│   │   ├── src/\n│   │   │   ├── auth/             # Authentication module (JWT, Passport strategies)\n│   │   │   ├── users/            # User management module (CRUD)\n│   │   │   ├── templates/        # Resume template management module (CRUD)\n│   │   │   ├── resumes/          # Resume generation & management module\n│   │   │   ├── files/            # File upload/download module (S3 integration)\n│   │   │   ├── pdf-generator/    # PDF generation service/module (Puppeteer integration)\n│   │   │   ├── config/           # Application configuration\n│   │   │   ├── main.ts           # Application entry point\n│   │   │   └── app.module.ts     # Root module\n│   │   ├── Dockerfile            # Dockerfile for backend service\n│   │   ├── nest-cli.json         # NestJS CLI configuration\n│   │   ├── package.json          # Node.js dependencies for backend\n│   │   └── tsconfig.json         # TypeScript configuration for backend\n│   └── web/                      # Next.js Frontend Application\n│       ├── public/               # Static assets (images, fonts, etc.)\n│       ├── src/\n│       │   ├── app/              # Next.js App Router structure\n│       │   │   ├── (auth)/       # Group for authentication routes (login, register)\n│       │   │   │   ├── login/\n│       │   │   │   └── register/\n│       │   │   ├── (main)/       # Group for main application routes\n│       │   │   │   ├── dashboard/\n│       │   │   │   ├── templates/\n│       │   │   │   ├── resume/[id]/\n│       │   │   │   └── settings/\n│       │   │   ├── api/          # Route handlers for API routes (if needed, prefer backend API)\n│       │   │   ├── globals.css   # Global styles\n│       │   │   ├── layout.tsx    # Root layout component\n│       │   │   └── page.tsx      # Root page component\n│       │   ├── components/       # Reusable React components (UI library agnostic)\n│       │   │   ├── common/\n│       │   │   └── ui/           # Components built with Shadcn/UI (if used)\n│       │   ├── hooks/            # Custom React hooks\n│       │   ├── lib/              # Client-side utilities, API clients (TanStack Query setup)\n│       │   └── styles/           # Tailwind CSS specific styles / other utility styles\n│       ├── Dockerfile            # Dockerfile for frontend service\n│       ├── next.config.js        # Next.js configuration\n│       ├── package.json          # Node.js dependencies for frontend\n│       ├── postcss.config.js     # PostCSS configuration\n│       ├── tailwind.config.ts    # Tailwind CSS configuration\n│       └── tsconfig.json         # TypeScript configuration for frontend\n├── packages/\n│   ├── config/                   # Shared configuration constants (e.g., environment variables types)\n│   │   └── index.ts\n│   ├── db/                       # Database schema and Prisma client\n│   │   ├── migrations/           # Prisma migrations\n│   │   ├── schema.prisma         # Prisma schema definition\n│   │   └── index.ts              # Prisma client export\n│   ├── ui/                       # Shared UI components (if common across multiple frontends/storybooks)\n│   │   ├── src/\n│   │   │   └── components/\n│   │   └── package.json\n│   └── types/                    # Shared TypeScript interfaces, types, enums (DTOs, models)\n│       └── index.ts\n├── infra/\n│   └── aws/                      # Terraform modules for AWS infrastructure provisioning\n│       ├── vpc.tf                # VPC and networking\n│       ├── ecs.tf                # ECS cluster, services, tasks definitions\n│       ├── rds.tf                # RDS PostgreSQL instance\n│       ├── s3.tf                 # S3 buckets for assets and PDFs\n│       ├── cognito.tf            # Cognito User Pool and Identity Pool\n│       ├── cloudfront.tf         # CloudFront distribution for frontend\n│       ├── iam.tf                # IAM roles and policies\n│       ├── variables.tf          # Input variables for Terraform modules\n│       └── outputs.tf            # Output variables from Terraform modules\n├── docs/\n│   ├── ARCHITECTURE.md           # High-level architecture overview\n│   ├── API.md                    # Backend API documentation (OpenAPI/Swagger)\n│   └── DATABASE_SCHEMA.md        # Database schema diagrams and explanations\n├── scripts/                      # Utility scripts (e.g., local setup, deploy helpers, DB seed)\n│   └── setup-local-dev.sh\n├── .env.example                  # Example environment variables\n├── docker-compose.yml            # Local development environment orchestration\n├── package.json                  # Root package.json for Yarn Workspaces\n├── README.md                     # Project README\n└── tsconfig.json                 # Monorepo base TypeScript configuration\n\n## Setup Instructions\n\nFollow these steps to get the Resumate AI project up and running on your local machine.\n\n### Prerequisites\n\n*   Node.js (LTS version, e.g., 18.x or 20.x)\n*   Yarn (v1.x or v3+ Berry with `nodeLinker: pnp` or `nodeLinker: node-modules` configured in `.yarnrc.yml`)\n*   Docker & Docker Compose\n*   Git\n\n### 1. Clone the Repository\n\n```bash\ngit clone https://github.com/your-username/resumate-ai.git\ncd resumate-ai\n```\n\n### 2. Configure Environment Variables\n\nCreate a `.env` file in the root directory of the project based on the `.env.example` file.\n\n```bash\ncp .env.example .env\n```\n\nEdit the `.env` file and fill in the necessary values. For local development, you might use:\n\n```env\n# Database Configuration (for local Docker PostgreSQL)\nDATABASE_URL=\"postgresql://user:password@localhost:5432/resumate_db\"\n\n# AWS S3 Configuration (for local MinIO or actual S3)\nAWS_ACCESS_KEY_ID=\"your_aws_access_key_id\"\nAWS_SECRET_ACCESS_KEY=\"your_aws_secret_access_key\"\nAWS_REGION=\"your_aws_region\"\nAWS_S3_BUCKET_NAME=\"resumate-pdfs-bucket\"\nAWS_S3_ENDPOINT=\"http://localhost:9000\" # For MinIO local S3 emulation\n\n# JWT Secret (for backend authentication)\nJWT_SECRET=\"supersecretjwtkey\"\n\n# Frontend Configuration (for Next.js)\nNEXT_PUBLIC_API_URL=\"http://localhost:3001/api\" # Backend API URL\nNEXT_PUBLIC_APP_URL=\"http://localhost:3000\" # Frontend URL\n```\n\n### 3. Start Local Database and Services with Docker Compose\n\nNavigate to the root of the project and start the Docker Compose services. This will spin up a PostgreSQL database and potentially a MinIO server for local S3 emulation.\n\n```bash\ndocker-compose up -d\n```\n\n### 4. Install Dependencies\n\nInstall root dependencies and then dependencies for all workspaces using Yarn.\n\n```bash\nyarn install\n```\n\n### 5. Setup Database Schema and Seed Data\n\nApply Prisma migrations to create the database schema.\n\n```bash\nyarn workspace @resumate-ai/db prisma migrate dev --name init # Or use `prisma db push` for quick dev sync\nyarn workspace @resumate-ai/db prisma generate # Generate Prisma client\n# Optional: Seed initial data (e.g., default templates)\n# yarn workspace @resumate-ai/api db:seed\n```\n\n### 6. Run the Backend (API)\n\nNavigate to the `apps/api` directory or use `yarn workspace` command.\n\n```bash\nyarn workspace @resumate-ai/api start:dev # Runs NestJS backend in watch mode\n```\n\nThe backend API will typically run on `http://localhost:3001`.\n\n### 7. Run the Frontend (Web)\n\nNavigate to the `apps/web` directory or use `yarn workspace` command.\n\n```bash\nyarn workspace @resumate-ai/web dev # Runs Next.js frontend in development mode\n```\n\nThe frontend application will typically run on `http://localhost:3000`.\n\n### 8. Access the Application\n\nOpen your web browser and navigate to `http://localhost:3000`. You should now be able to register an account, browse templates, and create resumes.\n"
    },
    {
      "path": "tsconfig.json",
      "content": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2021\",\n    \"lib\": [\"ES2021\"],\n    \"module\": \"commonjs\",\n    \"rootDir\": \".\",\n    \"resolveJsonModule\": true,\n    \"allowJs\": true,\n    \"outDir\": \"./dist\",\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"strict\": true,\n    \"skipLibCheck\": true,\n    \"isolatedModules\": true, // Ensure each file can be safely transpiled without relying on other imports being present at the same time.\n    \"noEmit\": true, // Next.js and NestJS handle their own emission\n    \"incremental\": true, // For faster incremental builds\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@resumate-ai/config\": [\"./packages/config\"],\n      \"@resumate-ai/db\": [\"./packages/db\"],\n      \"@resumate-ai/ui\": [\"./packages/ui\"],\n      \"@resumate-ai/types\": [\"./packages/types\"]\n    }\n  },\n  \"exclude\": [\"node_modules\"],\n  \"include\": [\"**/*.ts\", \"**/*.tsx\"]\n}\n"
    }
  ]
}
```